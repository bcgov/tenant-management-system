{{- if and (contains "-pr-" .Release.Name) (index .Values "postgresql-pr" "enabled") }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
type: Opaque
data:
  # Generate deterministic password based on release name
  {{- $password := printf "%s-pr-db-pass" .Release.Name | sha256sum | trunc 32 }}
  password: {{ $password | b64enc | quote }}
  postgres-password: {{ $password | b64enc | quote }}
  database-user: {{ "app" | b64enc | quote }}
  database-name: {{ "app" | b64enc | quote }}
  database-password: {{ $password | b64enc | quote }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ index .Values "postgresql-pr" "persistence" "size" | default "1Gi" }}
  storageClassName: {{ index .Values "postgresql-pr" "persistence" "storageClass" | default "netapp-file-standard" }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: postgresql
          image: {{ index .Values "postgresql-pr" "image" "registry" }}/{{ index .Values "postgresql-pr" "image" "repository" }}:{{ index .Values "postgresql-pr" "image" "tag" }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: database-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: database-name
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            {{- toYaml (index .Values "postgresql-pr" "resources") | nindent 12 }}
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: postgresql-data
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-postgresql
{{- end }}