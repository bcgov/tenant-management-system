{{- if and .Values.global.secrets .Values.global.secrets.enabled }}
{{- $databaseUser := .Values.global.config.databaseUser | default "app" }}
{{- $databaseAlias := .Values.global.databaseAlias | default .Release.Name }}
{{- $secretName := printf "%s-pguser-%s" $databaseAlias $databaseUser }}

{{- /* Initialize variables with defaults */ -}}
{{- $databasePassword := "" }}
{{- $databaseName := (.Values.global.config.dbName | default "app") }}
{{- $hostWithoutPort := printf "%s-pgbouncer" $databaseAlias }}
{{- $host := printf "%s:%s" $hostWithoutPort "5432" }}
{{- $databaseJDBCURLNoCreds := printf "jdbc:postgresql://%s/%s" $host $databaseName }}

{{- /* Try to look up the database secret */ -}}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName ) }}
{{- if not $secretObj }}
  {{- /* Handle missing secret based on environment */ -}}
  {{- if contains "-pr-" .Release.Name }}
    {{- /* For PR environments, use placeholder */ -}}
    {{- $databasePassword = "placeholder" | b64enc }}
  {{- else }}
    {{- fail (printf "Secret %s not found in namespace %s. Expected secret name: %s" $secretName .Release.Namespace $secretName) }}
  {{- end }}
{{- else }}
  {{- /* Use the existing secret data */ -}}
  {{- $secretData := (get $secretObj "data") }}
  {{- if not $secretData }}
    {{- fail (printf "Secret %s data not found in namespace %s" $secretName .Release.Namespace) }}
  {{- end }}
  {{- $databasePassword = get $secretData "password" }}
  {{- $databaseName = b64dec (get $secretData "dbname") }}
  {{- $hostWithoutPort = b64dec (get $secretData "host") }}
  {{- $host = printf "%s:%s" (b64dec (get $secretData "host")) (b64dec (get $secretData "port")) }}
  {{- $databaseJDBCURLNoCreds = printf "jdbc:postgresql://%s/%s" $host $databaseName }}
{{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-backend
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
data:
  # Database connection settings
  POSTGRES_PASSWORD: {{ $databasePassword | quote }}
  POSTGRES_USER: {{ $databaseUser | b64enc | quote }}
  POSTGRES_DATABASE: {{ $databaseName | b64enc | quote }}
  POSTGRES_HOST: {{ $hostWithoutPort | b64enc | quote }}
  POSTGRES_PORT: {{ "5432" | b64enc | quote }}

  # Application settings
  PORT: {{ .Values.backend.environment.port | b64enc | quote }}
  ALLOWED_ORIGINS: {{ .Values.backend.environment.allowedOrigins | b64enc | quote }}
  NODE_ENV: {{ .Values.global.config.nodeEnv | b64enc | quote }}
  LOG_LEVEL: {{ .Values.backend.environment.logLevel | b64enc | quote }}

  # SSO/Auth settings (will be updated by deployer)
  BCGOV_SSO_API_URL: {{ .Values.backend.environment.bcgovSsoApiUrl | b64enc | quote }}
  BCGOV_TOKEN_URL: {{ .Values.backend.environment.bcgovTokenUrl | b64enc | quote }}
  BCGOV_SSO_API_CLIENT_ID: {{ "placeholder" | b64enc | quote }}
  BCGOV_SSO_API_CLIENT_SECRET: {{ "placeholder" | b64enc | quote }}
  TMS_AUDIENCE: {{ .Values.backend.environment.tmsAudience | b64enc | quote }}
  JWKS_URI: {{ "placeholder" | b64enc | quote }}
  ISSUER: {{ "placeholder" | b64enc | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-flyway
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
data:
  FLYWAY_URL: {{ $databaseJDBCURLNoCreds | b64enc | quote }}
  FLYWAY_USER: {{ $databaseUser | b64enc | quote }}
  FLYWAY_PASSWORD: {{ $databasePassword | quote }}
{{- end }}