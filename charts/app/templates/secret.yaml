{{- if and .Values.global.secrets .Values.global.secrets.enabled }}
{{/* Set database user */}}
{{- $databaseUser := "app" }}
{{- $databaseAlias := .Values.global.databaseAlias | default .Release.Name }}
{{- $databaseName := "app" }}

{{/* Initialize variables */}}
{{- $databasePassword := "" }}
{{- $hostWithoutPort := "" }}

{{/* Handle Bitnami PostgreSQL for PR environments */}}
{{- $bitnamiPg := index .Values "bitnami-pg" }}
{{- if $bitnamiPg.enabled }}
  {{- $hostWithoutPort = printf "%s-postgresql" .Release.Name }}

  {{/* For PR environments, use a FIXED password that Bitnami will also use */}}
  {{/* Generate deterministic password based on release name */}}
  {{- $generatedPassword := printf "%s-pr-db-pass" .Release.Name | sha256sum | trunc 32 }}

  {{/* Check if we have an explicit password set in values */}}
  {{- if $bitnamiPg.auth.password }}
    {{- $databasePassword = $bitnamiPg.auth.password | b64enc }}
  {{- else }}
    {{/* Check if Bitnami secret already exists (for updates) */}}
    {{- $existingBitnamiSecret := (lookup "v1" "Secret" .Release.Namespace (printf "%s-postgresql" .Release.Name)) }}

    {{- if $existingBitnamiSecret }}
      {{/* Use existing password from Bitnami secret */}}
      {{- $databasePassword = get $existingBitnamiSecret.data "password" }}
    {{- else }}
      {{/* First install - use generated password and set it in Bitnami values */}}
      {{- $databasePassword = $generatedPassword | b64enc }}
      {{/* This will be used by Bitnami chart */}}
      {{- $_ := set $bitnamiPg.auth "password" $generatedPassword }}
    {{- end }}
  {{- end }}

  {{- $databaseName = $bitnamiPg.auth.database | default "app" }}

{{- else }}
  {{/* Production/Test environment using Crunchy */}}
  {{- $hostWithoutPort = printf "%s-pgbouncer" $databaseAlias }}
  {{- $secretName := printf "%s-pguser-%s" $databaseAlias $databaseUser }}
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) }}

  {{- if $secretObj }}
    {{- $secretData := (get $secretObj "data") }}
    {{- $databasePassword = get $secretData "password" }}
    {{- $databaseName = b64dec (get $secretData "dbname") | default "app" }}
  {{- else }}
    {{- fail (printf "Secret %s not found in namespace %s" $secretName .Release.Namespace) }}
  {{- end }}
{{- end }}

{{- $host := printf "%s:%s" $hostWithoutPort "5432" }}
{{- $databaseJDBCURLNoCreds := printf "jdbc:postgresql://%s/%s" $host $databaseName }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-backend
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
type: Opaque
data:
  # Database connection settings
  POSTGRES_PASSWORD: {{ $databasePassword | quote }}
  POSTGRES_USER: {{ $databaseUser | b64enc | quote }}
  POSTGRES_DATABASE: {{ $databaseName | b64enc | quote }}
  POSTGRES_HOST: {{ $hostWithoutPort | b64enc | quote }}
  POSTGRES_PORT: {{ "5432" | b64enc | quote }}

  # Application settings
  PORT: {{ .Values.backend.environment.port | b64enc | quote }}
  ALLOWED_ORIGINS: {{ .Values.backend.environment.allowedOrigins | b64enc | quote }}
  NODE_ENV: {{ .Values.global.config.nodeEnv | b64enc | quote }}
  LOG_LEVEL: {{ .Values.backend.environment.logLevel | b64enc | quote }}

  # SSO/Auth settings (placeholders - updated post-deployment)
  BCGOV_SSO_API_URL: {{ .Values.backend.environment.bcgovSsoApiUrl | b64enc | quote }}
  BCGOV_TOKEN_URL: {{ .Values.backend.environment.bcgovTokenUrl | b64enc | quote }}
  BCGOV_SSO_API_CLIENT_ID: {{ "placeholder" | b64enc | quote }}
  BCGOV_SSO_API_CLIENT_SECRET: {{ "placeholder" | b64enc | quote }}
  TMS_AUDIENCE: {{ .Values.backend.environment.tmsAudience | b64enc | quote }}
  JWKS_URI: {{ .Values.backend.environment.jwksUri | b64enc | quote }}
  ISSUER: {{ .Values.backend.environment.issuer | b64enc | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-flyway
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
type: Opaque
data:
  FLYWAY_URL: {{ $databaseJDBCURLNoCreds | b64enc | quote }}
  FLYWAY_USER: {{ $databaseUser | b64enc | quote }}
  FLYWAY_PASSWORD: {{ $databasePassword | quote }}
{{- end }}