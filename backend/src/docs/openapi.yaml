openapi: 3.0.3
info:
  title: Tenant Management System API
  description: API for managing tenants in the Tenant Management System
  version: 1.0.0
servers:
  - url: http://localhost:4144
    description: Local dev server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Checks the health status of the API service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiStatus:
                    type: string
                    example: "Healthy"
                  time:
                    type: string
                    format: date-time
                    example: "2024-03-21T10:00:00Z"
        '503':
          description: Service is unhealthy

  /v1/tenants:
    post:
      summary: Create a new tenant
      description: Creates a new tenant in the system. Requires JWT authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - ministryName
                - description
                - user
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  example: "Roads initiative"
                ministryName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Ministry of Natural Resources"
                description:
                  type: string
                  maxLength: 500
                  example: "My Tenant Description"
                user:
                  $ref: '#/components/schemas/BasicUser'
      responses:
        '201':
          description: Tenant successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenant:
                        $ref: '#/components/schemas/TenantWithUsers'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '409':
          description: Conflict - Tenant with same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/users:
    post:
      summary: Add a user to a tenant
      description: Adds a new user to an existing tenant. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
                - roles
              properties:
                user:
                  $ref: '#/components/schemas/BasicUser'
                roles:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 3
                  example: ["14c6bb48-54e2-4ce0-9bbd-af4982fff13b"]
      responses:
        '201':
          description: User successfully added to tenant
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: User already exists in tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    get:
      summary: Get users for a tenant
      description: Retrieves all users associated with a tenant. Requires JWT authentication and tenant access.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      responses:
        '200':
          description: List of users for the tenant
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/users/{ssoUserId}/tenants:
    get:
      summary: Get tenants for a user
      description: Retrieves all tenants associated with a specific user. Requires JWT authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: ssoUserId
          in: path
          required: true
          schema:
            type: string
          description: The SSO user ID
        - name: expand
          in: query
          required: false
          schema:
            type: string
            enum: [tenantUserRoles]
          description: Comma-separated list of relations to expand. Currently supports 'tenantUserRoles' to include user and role information.
      responses:
        '200':
          description: List of tenants for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenants:
                        type: array
                        items:
                          $ref: '#/components/schemas/TenantWithUsers'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/users/{tenantUserId}/roles:
    post:
      summary: Assign roles to a user in a tenant
      description: Assigns one or more roles to a user within a tenant. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: tenantUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user in the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  example: ["14c6bb48-54e2-4ce0-9bbd-af4982fff13b"]
      responses:
        '200':
          description: Roles successfully assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Role already assigned to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    delete:
      summary: Unassign a role from a user in a tenant
      description: Removes a role from a user within a tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: tenantUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user in the tenant
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the role to unassign
      responses:
        '204':
          description: Role successfully unassigned
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant, user, or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}:
    get:
      summary: Get tenant details
      description: Retrieves details of a specific tenant. Requires JWT authentication and tenant access.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: expand
          in: query
          required: false
          schema:
            type: string
            enum: [tenantUserRoles]
          description: Optional parameter to expand the response with additional details
      responses:
        '200':
          description: Tenant details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenant:
                        $ref: '#/components/schemas/TenantWithUsers'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    put:
      summary: Update tenant details
      description: Updates the details of an existing tenant. Requires JWT authentication and TENANT_OWNER role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  example: "Updated Roads Initiative"
                ministryName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Updated Ministry of Natural Resources"
                description:
                  type: string
                  maxLength: 500
                  example: "Updated tenant description"
      responses:
        '200':
          description: Tenant successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenant:
                        $ref: '#/components/schemas/Tenant'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - Tenant with same name and ministry name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/roles:
    get:
      summary: Get all available roles
      description: Retrieves a list of all available roles in the system. Requires JWT authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
              example:
                data:
                  roles:
                    - id: "14c6bb48-54e2-4ce0-9bbd-af4982fff13b"
                      name: "TMS.TENANT_OWNER"
                      description: "Tenant Owner Role"
                      createdDateTime: "2024-03-21T10:00:00Z"
                      updatedDateTime: "2024-03-21T10:00:00Z"
                    - id: "25d7cc59-65f3-5df1-0cce-bg6093ggg24c"
                      name: "TMS.USER_ADMIN"
                      description: "User Admin Role"
                      createdDateTime: "2024-03-21T10:00:00Z"
                      updatedDateTime: "2024-03-21T10:00:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenant-requests:
    post:
      summary: Create a new tenant request
      description: Creates a new request for a tenant with the specified details. Requires JWT authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - ministryName
                - user
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  example: "Roads Initiative"
                ministryName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Ministry of Natural Resources"
                description:
                  type: string
                  maxLength: 500
                  example: "Tenant for managing road infrastructure"
                user:
                  type: object
                  required:
                    - firstName
                    - lastName
                    - displayName
                    - ssoUserId
                    - userName
                    - email
                  properties:
                    firstName:
                      type: string
                      example: "John"
                    lastName:
                      type: string
                      example: "Smith"
                    displayName:
                      type: string
                      example: "John Smith: ENV: EX"
                    ssoUserId:
                      type: string
                      example: "F45AFBBD68C4466F956BA3A1D91878AD"
                    userName:
                      type: string
                      example: "johnSmith"
                    email:
                      type: string
                      format: email
                      example: "john.Smith@example.com"
      responses:
        '201':
          description: Tenant request successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenantRequest:
                        $ref: '#/components/schemas/TenantRequest'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    get:
      summary: Get all tenant requests
      description: |
        Retrieves a list of all tenant requests. Requires JWT authentication and TMS.OPERATIONS_ADMIN role.
        Results are ordered by request date (most recent first).
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [NEW, APPROVED, REJECTED]
          description: Filter tenant requests by status
          example: "NEW"
      responses:
        '200':
          description: Tenant requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenantRequests:
                        type: array
                        items:
                          $ref: '#/components/schemas/TenantRequest'
              example:
                data:
                  tenantRequests:
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      name: "Roads Initiative"
                      ministryName: "Ministry of Natural Resources"
                      description: "Tenant for managing road infrastructure"
                      status: "NEW"
                      requestedBy: "John Smith: ENV: EX"
                      requestedAt: "2024-03-15"
                      decisionedBy: null
                      decisionedAt: null
                      rejectionReason: null
                      createdDateTime: "2024-03-15"
                      updatedDateTime: "2024-03-15"
                      createdBy: "123e4567e89b12d3a456426614174000"
                      updatedBy: "123e4567e89b12d3a456426614174000"
                    - id: "456f7890-f12c-23d4-e567-537725285111"
                      name: "Health Portal"
                      ministryName: "Ministry of Health"
                      description: "Tenant for health services portal"
                      status: "APPROVED"
                      requestedBy: "Jane Doe: HLTH: EX"
                      requestedAt: "2024-03-10"
                      decisionedBy: "Admin User"
                      decisionedAt: "2024-03-12"
                      rejectionReason: null
                      createdDateTime: "2024-03-10"
                      updatedDateTime: "2024-03-12"
                      createdBy: "456f7890f12c23d4e567537725285111"
                      updatedBy: "admin-user-guid"
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have the required TMS.OPERATIONS_ADMIN role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenant-requests/{requestId}/status:
    patch:
      summary: Update the status of a tenant request
      description: |
        Updates the status of a tenant request. If approved, creates a new tenant.
        Requires JWT authentication and TMS.OPERATIONS_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [APPROVED, REJECTED]
                  description: New status for the tenant request
                  example: "APPROVED"
                rejectionReason:
                  type: string
                  description: Required when status is REJECTED
                  maxLength: 500
                  example: "Insufficient information provided"
      responses:
        '200':
          description: Tenant request status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenantRequest:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Unique identifier of the tenant request
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      name:
                        type: string
                        description: Name of the tenant
                        example: "Ministry of Health"
                      ministryName:
                        type: string
                        description: Name of the ministry
                        example: "Health"
                      description:
                        type: string
                        description: Description of the tenant
                        example: "Tenant for Ministry of Health applications"
                      status:
                        type: string
                        enum: [NEW, APPROVED, REJECTED]
                        description: Current status of the tenant request
                        example: "APPROVED"
                      requestedBy:
                        type: string
                        description: Display name of the user who requested the tenant
                        example: "John Smith"
                      decisionedBy:
                        type: string
                        description: Display name of the operations admin who made the decision
                        example: "Jane Doe"
                      decisionedAt:
                        type: string
                        format: date-time
                        description: Timestamp when the decision was made
                        example: "2024-03-20T10:30:00Z"
                      rejectionReason:
                        type: string
                        description: Reason for rejection, if the request was rejected
                        example: "Insufficient information provided"
                      createdBy:
                        type: string
                        description: SSO user ID of the user who created the request
                        minLength: 32
                        maxLength: 32
                        example: "123e4567e89b12d3a456426614174000"
                      updatedBy:
                        type: string
                        description: SSO user ID of the user who last updated the request
                        minLength: 32
                        maxLength: 32
                        example: "123e4567e89b12d3a456426614174000"
                  tenant:
                    type: object
                    description: Basic tenant information (only included when status is APPROVED)
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Unique identifier of the tenant
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      name:
                        type: string
                        description: Name of the tenant
                        example: "Ministry of Health"
                      ministryName:
                        type: string
                        description: Name of the ministry
                        example: "Health"
                      description:
                        type: string
                        description: Description of the tenant
                        example: "Tenant for Ministry of Health applications"
                      createdBy:
                        type: string
                        description: SSO user ID of the user who created the tenant
                        minLength: 32
                        maxLength: 32
                        example: "123e4567e89b12d3a456426614174000"
                      updatedBy:
                        type: string
                        description: SSO user ID of the user who last updated the tenant
                        minLength: 32
                        maxLength: 32
                        example: "123e4567e89b12d3a456426614174000"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have the required TMS.OPERATIONS_ADMIN role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - Cannot update tenant request with current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/shared-services:
    post:
      summary: Create a new shared service
      description: Creates a new shared service with roles. Requires JWT authentication and TMS.OPERATIONS_ADMIN role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - clientIdentifier
                - roles
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: '^\S.*\S$'
                  example: "Email Service"
                clientIdentifier:
                  type: string
                  minLength: 1
                  maxLength: 55
                  pattern: '^\S.*\S$'
                  example: "email-service-client"
                description:
                  type: string
                  maxLength: 500
                  example: "Shared email service for all tenants"
                isActive:
                  type: boolean
                  default: true
                  example: true
                roles:
                  type: array
                  minItems: 1
                  maxItems: 10
                  items:
                    type: object
                    required:
                      - name
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 30
                        pattern: '^\S.*\S$'
                        example: "Email User"
                      description:
                        type: string
                        maxLength: 255
                        example: "Can send emails through the service"
      responses:
        '201':
          description: Shared service successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sharedService:
                        $ref: '#/components/schemas/SharedServiceWithRoles'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User is not an operations administrator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '409':
          description: Conflict - Shared service with same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      summary: Get all active shared services
      description: Retrieves all shared services that are currently active. Returns shared services with their associated roles. Requires JWT authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active shared services successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sharedServices:
                        type: array
                        items:
                          $ref: '#/components/schemas/SharedServiceWithRoles'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/shared-services:
    post:
      summary: Associate a shared service to a tenant
      description: Associates an existing shared service with a tenant. Requires JWT authentication and TENANT_OWNER role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sharedServiceId
              properties:
                sharedServiceId:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '201':
          description: Shared service successfully associated with tenant
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User is not a tenant owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant or shared service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - Shared service is already associated with tenant or shared service is inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      summary: Get shared services associated with a tenant
      description: Retrieves all shared services that are associated with a specific tenant. Returns shared services with their associated roles. Requires JWT authentication and tenant access.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      responses:
        '200':
          description: Shared services for the tenant successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sharedServices:
                        type: array
                        items:
                          $ref: '#/components/schemas/SharedServiceWithRoles'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/groups:
    post:
      summary: Create a new group in a tenant
      description: Creates a new group within a tenant. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: '^\S.*\S$'
                  example: "Development Team"
                description:
                  type: string
                  maxLength: 500
                  example: "Group for development team members"
                tenantUserId:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174001"
      responses:
        '201':
          description: Group successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      group:
                        $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - Group with same name already exists in tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    get:
      summary: Get all groups for a tenant
      description: Retrieves all groups associated with a tenant. Requires JWT authentication and tenant access.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      responses:
        '200':
          description: List of groups for the tenant
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      groups:
                        type: array
                        items:
                          $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/groups/{groupId}:
    get:
      summary: Get a specific group in a tenant
      description: Retrieves details of a specific group within a tenant. Requires JWT authentication and tenant access.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group
        - name: expand
          in: query
          required: false
          schema:
            type: string
            enum: [groupUsers]
          description: Comma-separated list of relations to expand. Currently supports 'groupUsers' to include user information.
      responses:
        '200':
          description: Group details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      group:
                        allOf:
                          - $ref: '#/components/schemas/Group'
                          - type: object
                            properties:
                              users:
                                type: array
                                items:
                                  $ref: '#/components/schemas/GroupUserWithUser'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    put:
      summary: Update a group in a tenant
      description: Updates an existing group within a tenant. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  pattern: '^\S.*\S$'
                  example: "Updated Development Team"
                description:
                  type: string
                  maxLength: 500
                  example: "Updated description for development team"
      responses:
        '200':
          description: Group successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      group:
                        $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - Group with same name already exists in tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/groups/{groupId}/users:
    post:
      summary: Add a user to a group
      description: Adds a user to an existing group within a tenant. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  $ref: '#/components/schemas/BasicUser'
      responses:
        '201':
          description: User successfully added to group
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      groupUser:
                        $ref: '#/components/schemas/GroupUserWithUser'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant, group, or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - User is already in the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/groups/{groupId}/users/{groupUserId}:
    delete:
      summary: Remove a user from a group
      description: Removes a user from an existing group within a tenant. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group
        - name: groupUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group user to remove
      responses:
        '204':
          description: User successfully removed from group
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant, group, or group user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/groups/{groupId}/shared-services/shared-service-roles:
    get:
      summary: Get shared service roles for a group
      description: Retrieves all shared service roles for a specific group, including assignment status. Requires JWT authentication and tenant access.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group
      responses:
        '200':
          description: Shared service roles for the group successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sharedServices:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              example: "456e7890-e89b-12d3-a456-426614174001"
                            name:
                              type: string
                              example: "Email Service"
                            clientIdentifier:
                              type: string
                              example: "email-service-client"
                            description:
                              type: string
                              example: "Email service for tenant communications"
                            createdDateTime:
                              type: string
                              format: date-time
                              example: "2024-01-10T09:00:00Z"
                            updatedDateTime:
                              type: string
                              format: date-time
                              example: "2024-01-15T14:30:00Z"
                            createdBy:
                              type: string
                              example: "admin123"
                            updatedBy:
                              type: string
                              example: "admin123"
                            sharedServiceRoles:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: string
                                    format: uuid
                                    example: "123e4567-e89b-12d3-a456-426614174000"
                                  name:
                                    type: string
                                    example: "Admin Role"
                                  description:
                                    type: string
                                    example: "Administrative role for the service"
                                  enabled:
                                    type: boolean
                                    example: true
                                  createdDateTime:
                                    type: string
                                    format: date-time
                                    nullable: true
                                    example: "2024-01-15T10:30:00Z"
                                  createdBy:
                                    type: string
                                    nullable: true
                                    example: "user123"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    put:
      summary: Update shared service roles for a group
      description: Bulk assign or unassign shared service roles to a group. Handles new assignments, soft deletes, and restoration of soft-deleted assignments. Requires JWT authentication and TENANT_OWNER or USER_ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sharedServices
              properties:
                sharedServices:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - sharedServiceRoles
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "c6c23ac7-f0bf-4025-bcf5-416dd397b4ee"
                      sharedServiceRoles:
                        type: array
                        items:
                          type: object
                          required:
                            - id
                            - enabled
                          properties:
                            id:
                              type: string
                              format: uuid
                              example: "5deaa72d-417e-4508-b4d8-3e3e4cf6572a"
                            enabled:
                              type: boolean
                              example: false
                  example:
                    - id: "c6c23ac7-f0bf-4025-bcf5-416dd397b4ee"
                      sharedServiceRoles:
                        - id: "5deaa72d-417e-4508-b4d8-3e3e4cf6572a"
                          enabled: false
                        - id: "7ec4f5aa-b5d6-4668-a450-09b3f18e6622"
                          enabled: true
      responses:
        '200':
          description: Shared service roles for the group successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sharedServices:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              example: "456e7890-e89b-12d3-a456-426614174001"
                            name:
                              type: string
                              example: "Email Service"
                            clientIdentifier:
                              type: string
                              example: "email-service-client"
                            description:
                              type: string
                              example: "Email service for tenant communications"
                            createdDateTime:
                              type: string
                              format: date-time
                              example: "2024-01-10T09:00:00Z"
                            updatedDateTime:
                              type: string
                              format: date-time
                              example: "2024-01-15T14:30:00Z"
                            createdBy:
                              type: string
                              example: "admin123"
                            updatedBy:
                              type: string
                              example: "admin123"
                            sharedServiceRoles:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: string
                                    format: uuid
                                    example: "123e4567-e89b-12d3-a456-426614174000"
                                  name:
                                    type: string
                                    example: "Admin Role"
                                  description:
                                    type: string
                                    example: "Administrative role for the service"
                                  enabled:
                                    type: boolean
                                    example: true
                                  createdDateTime:
                                    type: string
                                    format: date-time
                                    nullable: true
                                    example: "2024-01-15T10:30:00Z"
                                  createdBy:
                                    type: string
                                    nullable: true
                                    example: "user123"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant, group, shared service, or shared service role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

components:
  schemas:
    BasicUser:
      type: object
      required:
        - firstName
        - lastName
        - displayName
        - userName
        - ssoUserId
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Smith"
        displayName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Smith, John: JEDI: EX"
        userName:
          type: string
          minLength: 1
          maxLength: 50
          example: "JSMITH1"
        ssoUserId:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        email:
          type: string
          format: email
          nullable: true
          example: "John@gov.bc.ca"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        ssoUser:
          $ref: '#/components/schemas/SSOUser'

    SSOUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        ssoUserId:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Smith"
        displayName:
          type: string
          example: "Smith, John: JEDI: EX"
        userName:
          type: string
          example: "JSMITH1"
        email:
          type: string
          format: email
          nullable: true
          example: "John@gov.bc.ca"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "14c6bb48-54e2-4ce0-9bbd-af4982fff13b"
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "TMS.USER_ADMIN"
        description:
          type: string
          minLength: 1
          maxLength: 255
          example: "TMS User Admin Role"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "f98cbbfb-b96c-4a40-a10b-c2a7e795022c"
        name:
          type: string
          example: "Roads initiative"
        ministryName:
          type: string
          example: "Ministry of Natural Resources"
        description:
          type: string
          example: "My Tenant Description"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    TenantWithUsers:
      allOf:
        - $ref: '#/components/schemas/Tenant'
        - type: object
          properties:
            users:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'

    BadRequestResponse:
      type: object
      properties:
        name:
          type: string
          example: "ValidationError"
        message:
          type: string
          example: "ValidationFailed"
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        body:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                example: "\"name\" is required"
              path:
                type: array
                items:
                  type: string
                example: ["name"]
              type:
                type: string
                example: "any.required"

    UnauthorizedErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Unauthorized"
        message:
          type: string
          example: "Error occurred during authentication"
        statusCode:
          type: integer
          example: 401

    ForbiddenErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "ForbiddenError"
        message:
          type: string
          example: "Access denied: User does not have required roles for tenant"
        statusCode:
          type: integer
          example: 403
        error:
          type: string
          example: "Forbidden"

    NotFoundErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Tenant Not Found"
        message:
          type: string
          example: "Tenant Not Found: 21eb86-9cf5-40a3-9a0d-81b551f50a2f"
        statusCode:
          type: integer
          example: 404
        error:
          type: string
          example: "Not Found"

    ConflictErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Error occurred adding user to the tenant"
        message:
          type: string
          example: "User is already added to this tenant: 8821eb86-9cf5-40a3-9a0d-81b551f50a2f"
        statusCode:
          type: integer
          example: 409
        error:
          type: string
          example: "Conflict"

    InternalServerErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Error occurred during tenant creation"
        message:
          type: string
          example: "This is an error message"
        statusCode:
          type: integer
          example: 500
        error:
          type: string
          example: "Internal Server Error"

    TenantRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Roads Initiative"
        ministryName:
          type: string
          example: "Ministry of Natural Resources"
        description:
          type: string
          example: "Tenant for managing road infrastructure"
        status:
          type: string
          enum: [NEW, APPROVED, REJECTED]
          example: "NEW"
        requestedBy:
          type: string
          example: "John Smith: ENV"
        requestedAt:
          type: string
          format: date
          example: "2024-03-15"
        decisionedBy:
          type: string
          nullable: true
          example: null
        decisionedAt:
          type: string
          format: date
          nullable: true
          example: null
        rejectionReason:
          type: string
          nullable: true
          example: null
        createdDateTime:
          type: string
          format: date
          example: "2024-03-15"
        updatedDateTime:
          type: string
          format: date
          example: "2024-03-15"
        createdBy:
          type: string
          description: SSO user ID of the user who created the request
          minLength: 32
          maxLength: 32
          example: "123e4567e89b12d3a456426614174000"
        updatedBy:
          type: string
          description: SSO user ID of the user who last updated the request
          minLength: 32
          maxLength: 32
          example: "123e4567e89b12d3a456426614174000"

    TenantRequestCreate:
      type: object
      required:
        - name
        - ministryName
        - user
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 30
          example: "Roads Initiative"
        ministryName:
          type: string
          minLength: 1
          maxLength: 100
          example: "Ministry of Natural Resources"
        description:
          type: string
          maxLength: 500
          example: "Tenant for managing road infrastructure"
        user:
          type: object
          required:
            - firstName
            - lastName
            - displayName
            - ssoUserId
            - userName
            - email
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Smith"
            displayName:
              type: string
              example: "John Smith: ENV: EX"
            ssoUserId:
              type: string
              example: "F45AFBBD68C4466F956BA3A1D91878AD"
            userName:
              type: string
              example: "johnSmith"
            email:
              type: string
              format: email
              example: "john.Smith@example.com"

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 1
          maxLength: 30
          example: "Development Team"
        description:
          type: string
          maxLength: 500
          example: "Group for development team members"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    GroupUserWithUser:
      allOf:
        - $ref: '#/components/schemas/GroupUser'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    GroupUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        groupId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        tenantUserId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        isDeleted:
          type: boolean
          default: false
          example: false
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        createdBy:
          type: string
          example: "user123"
        updatedBy:
          type: string
          example: "user123"

    SharedServiceWithRoles:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 1
          maxLength: 30
          example: "Email Service"
        clientIdentifier:
          type: string
          minLength: 1
          maxLength: 55
          example: "email-service-client"
        description:
          type: string
          maxLength: 500
          example: "Shared email service for all tenants"
        isActive:
          type: boolean
          default: true
          example: true
        roles:
          type: array
          minItems: 1
          maxItems: 10
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 30
                pattern: '^\S.*\S$'
                example: "Email User"
              description:
                type: string
                maxLength: 255
                example: "Can send emails through the service"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        createdBy:
          type: string
          example: "user123"
        updatedBy:
          type: string
          example: "user123"

    SharedService:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 1
          maxLength: 30
          example: "Email Service"
        clientIdentifier:
          type: string
          minLength: 1
          maxLength: 55
          example: "email-service-client"
        description:
          type: string
          maxLength: 500
          example: "Shared email service for all tenants"
        isActive:
          type: boolean
          default: true
          example: true
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        createdBy:
          type: string
          example: "user123"
        updatedBy:
          type: string
          example: "user123"

    SharedServiceRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        name:
          type: string
          minLength: 1
          maxLength: 30
          example: "Email User"
        description:
          type: string
          maxLength: 255
          example: "Can send emails through the service"
        isDeleted:
          type: boolean
          default: false
          example: false
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        createdBy:
          type: string
          example: "user123"
        updatedBy:
          type: string
          example: "user123"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
