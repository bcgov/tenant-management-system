openapi: 3.0.3
info:
  title: Tenancy Management System API
  description: API for managing tenants in the Tenancy Management System
  version: 1.0.0
servers:
  - url: http://localhost:4144
    description: Local dev server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Checks the health status of the API service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiStatus:
                    type: string
                    example: "Healthy"
                  time:
                    type: string
                    format: date-time
                    example: "2024-03-21T10:00:00Z"
        '503':
          description: Service is unhealthy

  /v1/tenants:
    post:
      summary: Create a new tenant
      description: Creates a new tenant in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - ministryName
                - description
                - user
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  example: "Roads initiative"
                ministryName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Ministry of Natural Resources"
                description:
                  type: string
                  maxLength: 500
                  example: "My Tenant Description"
                user:
                  $ref: '#/components/schemas/BasicUser'
      responses:
        '201':
          description: Tenant successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenant:
                        $ref: '#/components/schemas/TenantWithUsers'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '409':
          description: Conflict - Tenant with same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/users:
    post:
      summary: Add a user to a tenant
      description: Adds a new user to an existing tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
                - roles
              properties:
                user:
                  $ref: '#/components/schemas/BasicUser'
                roles:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 3
                  example: ["14c6bb48-54e2-4ce0-9bbd-af4982fff13b"]
      responses:
        '201':
          description: User successfully added to tenant
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: User already exists in tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    get:
      summary: Get users for a tenant
      description: Retrieves all users associated with a tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      responses:
        '200':
          description: List of users for the tenant
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/users/{ssoUserId}/tenants:
    get:
      summary: Get tenants for a user
      description: Retrieves all tenants associated with a specific user
      parameters:
        - name: ssoUserId
          in: path
          required: true
          schema:
            type: string
          description: The SSO user ID
        - name: expand
          in: query
          required: false
          schema:
            type: string
            enum: [tenantUserRoles]
          description: Comma-separated list of relations to expand. Currently supports 'tenantUserRoles' to include user and role information.
      responses:
        '200':
          description: List of tenants for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenants:
                        type: array
                        items:
                          $ref: '#/components/schemas/TenantWithUsers'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}/users/{tenantUserId}/roles:
    post:
      summary: Assign roles to a user in a tenant
      description: Assigns one or more roles to a user within a tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: tenantUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user in the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  example: ["14c6bb48-54e2-4ce0-9bbd-af4982fff13b"]
      responses:
        '200':
          description: Roles successfully assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Role already assigned to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    delete:
      summary: Unassign a role from a user in a tenant
      description: Removes a role from a user within a tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: tenantUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user in the tenant
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the role to unassign
      responses:
        '204':
          description: Role successfully unassigned
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have required roles (TENANT_OWNER or USER_ADMIN)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant, user, or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/tenants/{tenantId}:
    get:
      summary: Get tenant details
      description: Retrieves details of a specific tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
        - name: expand
          in: query
          required: false
          schema:
            type: string
            enum: [tenantUserRoles]
          description: Optional parameter to expand the response with additional details
      responses:
        '200':
          description: Tenant details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenant:
                        $ref: '#/components/schemas/TenantWithUsers'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not have access to the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    put:
      summary: Update tenant details
      description: Updates the details of an existing tenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 30
                  example: "Updated Roads Initiative"
                ministryName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Updated Ministry of Natural Resources"
                description:
                  type: string
                  maxLength: 500
                  example: "Updated tenant description"
      responses:
        '200':
          description: Tenant successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenant:
                        $ref: '#/components/schemas/Tenant'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '409':
          description: Conflict - Tenant with same name and ministry name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /v1/roles:
    get:
      summary: Get all available roles
      description: Retrieves a list of all available roles in the system
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
              example:
                data:
                  roles:
                    - id: "14c6bb48-54e2-4ce0-9bbd-af4982fff13b"
                      name: "TMS.TENANT_OWNER"
                      description: "Tenant Owner Role"
                      createdDateTime: "2024-03-21T10:00:00Z"
                      updatedDateTime: "2024-03-21T10:00:00Z"
                    - id: "25d7cc59-65f3-5df1-0cce-bg6093ggg24c"
                      name: "TMS.USER_ADMIN"
                      description: "User Admin Role"
                      createdDateTime: "2024-03-21T10:00:00Z"
                      updatedDateTime: "2024-03-21T10:00:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

components:
  schemas:
    BasicUser:
      type: object
      required:
        - firstName
        - lastName
        - displayName
        - userName
        - ssoUserId
        - email
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Smith"
        displayName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Smith, John: JEDI: EX"
        userName:
          type: string
          minLength: 1
          maxLength: 50
          example: "JSMITH1"
        ssoUserId:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        email:
          type: string
          format: email
          example: "John@gov.bc.ca"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        ssoUser:
          $ref: '#/components/schemas/SSOUser'

    SSOUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        ssoUserId:
          type: string
          format: uuid
          example: "fd33f1cef7ca4b19a71104d4ecf7066b"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Smith"
        displayName:
          type: string
          example: "Smith, John: JEDI: EX"
        userName:
          type: string
          example: "JSMITH1"
        email:
          type: string
          format: email
          example: "John@gov.bc.ca"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "14c6bb48-54e2-4ce0-9bbd-af4982fff13b"
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "TMS.USER_ADMIN"
        description:
          type: string
          minLength: 1
          maxLength: 255
          example: "TMS User Admin Role"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "f98cbbfb-b96c-4a40-a10b-c2a7e795022c"
        name:
          type: string
          example: "Roads initiative"
        ministryName:
          type: string
          example: "Ministry of Natural Resources"
        description:
          type: string
          example: "My Tenant Description"
        createdDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"
        updatedDateTime:
          type: string
          format: date-time
          example: "2024-03-21T10:00:00Z"

    TenantWithUsers:
      allOf:
        - $ref: '#/components/schemas/Tenant'
        - type: object
          properties:
            users:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'

    BadRequestResponse:
      type: object
      properties:
        name:
          type: string
          example: "ValidationError"
        message:
          type: string
          example: "ValidationFailed"
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        body:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                example: "\"name\" is required"
              path:
                type: array
                items:
                  type: string
                example: ["name"]
              type:
                type: string
                example: "any.required"

    UnauthorizedErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Unauthorized"
        message:
          type: string
          example: "Error occurred during authentication"
        statusCode:
          type: integer
          example: 401

    ForbiddenErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "ForbiddenError"
        message:
          type: string
          example: "Access denied: User does not have required roles for tenant"
        statusCode:
          type: integer
          example: 403
        error:
          type: string
          example: "Forbidden"

    NotFoundErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Tenant Not Found"
        message:
          type: string
          example: "Tenant Not Found: 21eb86-9cf5-40a3-9a0d-81b551f50a2f"
        statusCode:
          type: integer
          example: 404
        error:
          type: string
          example: "Not Found"

    ConflictErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Error occurred adding user to the tenant"
        message:
          type: string
          example: "User is already added to this tenant: 8821eb86-9cf5-40a3-9a0d-81b551f50a2f"
        statusCode:
          type: integer
          example: 409
        error:
          type: string
          example: "Conflict"

    InternalServerErrorResponse:
      type: object
      properties:
        name:
          type: string
          example: "Error occurred during tenant creation"
        message:
          type: string
          example: "This is an error message"
        statusCode:
          type: integer
          example: 500
        error:
          type: string
          example: "Internal Server Error"
