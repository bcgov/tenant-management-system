name: PR

on:
  pull_request_target:  # Change from pull_request to pull_request_target
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write
  pull-requests: write
  packages: write
  id-token: write
  attestations: write

jobs:
  # Add security check as first job
  security-check:
    name: Security Check
    runs-on: ubuntu-24.04
    outputs:
      safe-to-run: ${{ steps.check.outputs.safe-to-run }}
    steps:
      - name: Check if safe to run
        id: check
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "PR from fork: ${{ github.event.pull_request.head.repo.full_name }}"
            
            # Check user permissions
            author="${{ github.event.pull_request.user.login }}"
            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/collaborators/$author/permission")
            
            permission=$(echo "$response" | jq -r '.permission // "none"')
            
            if [[ "$permission" == "admin" || "$permission" == "write" || "$permission" == "maintain" ]]; then
              echo "Fork PR from trusted user - safe to run"
              echo "safe-to-run=true" >> $GITHUB_OUTPUT
            else
              echo "Fork PR needs manual approval"
              echo "safe-to-run=false" >> $GITHUB_OUTPUT
              
              # Post comment
              gh pr comment ${{ github.event.number }} \
                --body "⚠️ This PR is from a fork and requires manual approval from a maintainer before deployment."
              exit 1
            fi
          else
            echo "safe-to-run=true" >> $GITHUB_OUTPUT
          fi

  builds:
    name: Builds
    needs: [security-check]
    if: needs.security-check.outputs.safe-to-run == 'true'
    uses: ./.github/workflows/.build-images.yml
    permissions:
      packages: write
      id-token: write
      attestations: write
    with:
      tags: pr-${{ github.event.pull_request.number }}
      keep_versions: 5

  deploys:
    name: Deploy PR-${{ github.event.number }} Environment
    needs: [builds, security-check]
    if: needs.security-check.outputs.safe-to-run == 'true'
    uses: ./.github/workflows/.deployer.yml
    secrets:
      oc_namespace: ${{ secrets.OC_NAMESPACE }}
      oc_token: ${{ secrets.OC_TOKEN }}
      bcgov_sso_api_client_id: ${{ secrets.BCGOV_SSO_API_CLIENT_ID }}
      bcgov_sso_api_client_secret: ${{ secrets.BCGOV_SSO_API_CLIENT_SECRET }}
      vite_keycloak_client_id: ${{ secrets.VITE_KEYCLOAK_CLIENT_ID }}
    with:
      release_name: ${{ github.event.repository.name }}-pr-${{ github.event.number }}
      environment: dev
      db_user: app
      tags: pr-${{ github.event.pull_request.number }}
      timeout-minutes: 10
      values: values-pr.yaml  # Use PR-specific values
      params: >-
        --set-string global.registry=ghcr.io
        --set-string global.repository=bcgov/tenant-management-system
        --set global.secrets.persist=false
        --set backend.imagePullPolicy=Always
        --set frontend.imagePullPolicy=Always
        --set backend.deploymentStrategy=Recreate
        --set frontend.deploymentStrategy=Recreate
        --set global.debug=true
        --set backend.resources.requests.memory=256Mi
        --set backend.resources.limits.memory=512Mi
        --set frontend.resources.requests.memory=128Mi
        --set frontend.resources.limits.memory=256Mi
        --set global.namespace.suffix=-pr-${{ github.event.number }}
        --set global.config.databaseUser=app
        --set bitnami-pg.auth.username=app
        --set bitnami-pg.auth.database=app
        --set bitnami-pg.auth.password=pr-password-${{ github.event.number }}
        --set bitnami-pg.fullnameOverride=${{ github.event.repository.name }}-pr-${{ github.event.number }}-postgresql
        --set crunchy.enabled=false
        --set bitnami-pg.enabled=true

      #triggers: "backend/,frontend/,migrations/,charts/,.github/"
      #db_triggers: "charts/crunchy/"
      deployment_url: https://${{ github.event.repository.name }}-pr-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca

  security_scan:
    name: ZAP Security Scan (PR-${{ github.event.number }})
    permissions:
      contents: read
    needs: [deploys]
    uses: ./.github/workflows/.zap-scan.yml
    with:
      target_url: https://${{ github.event.repository.name }}-pr-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca
      fail_on_high: false
      scan_type: baseline

  results:
    name: PR Results
    needs: [builds, deploys, security_scan]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: echo "At least one job has failed." && exit 1
      - run: echo "Success!"

  comment:
    name: Comment on PR
    needs: [deploys]
    if: always() && needs.deploys.result == 'success'
    runs-on: ubuntu-24.04
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ## 🚀 PR Environment Deployed!

            **Environment:** `dev`  
            **Frontend URL:** https://${{ github.event.repository.name }}-pr-${{ github.event.pull_request.number }}-frontend.apps.silver.devops.gov.bc.ca  
            **Tags:** `pr-${{ github.event.pull_request.number }}`
            **Database:** Isolated PR database with user `app`

            The application has been deployed to the dev environment with PR-specific resources including its own database.