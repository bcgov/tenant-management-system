name: Update Secrets

on:
  workflow_call:
    inputs:
      release_name:
        required: true
        type: string
        description: "Release name (e.g., tenant-management-system-dev)"
      environment:
        required: false
        type: string
        description: "Environment (dev, test, prod); omit for PRs"
    secrets:
      oc_namespace:
        required: true
      oc_token:
        required: true
      bcgov_sso_api_client_id:
        required: true
      bcgov_sso_api_client_secret:
        required: true
      vite_keycloak_client_id:
        required: true

permissions: {}

jobs:
  update_secrets:
    name: Update Secrets
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: bcgov/action-oc-runner@12997e908fba505079d1aab6f694a17fe15e9b28 # v1.2.2
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          commands: |
            # Get release name
            RELEASE="${{ inputs.release_name }}"
            
            # Update secrets with real values
            echo "Patching secret $RELEASE-backend"
            
            # Update client ID
            CLIENT_ID=$(echo -n "${{ secrets.bcgov_sso_api_client_id }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_ID":"'$CLIENT_ID'"}}'
            
            # Update client secret 
            CLIENT_SECRET=$(echo -n "${{ secrets.bcgov_sso_api_client_secret }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_SECRET":"'$CLIENT_SECRET'"}}'
            
            # Set appropriate login proxy URL based on environment
            if [[ "${{ inputs.environment }}" == "prod" ]]; then
              LOGIN_PROXY="loginproxy.gov.bc.ca"
              ISSUER="https://loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            elif [[ "${{ inputs.environment }}" == "test" ]]; then
              LOGIN_PROXY="test.loginproxy.gov.bc.ca"  
              ISSUER="https://test.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://test.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            else
              LOGIN_PROXY="dev.loginproxy.gov.bc.ca"
              ISSUER="https://dev.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            fi

            # Update issuer
            ISSUER_B64=$(echo -n "$ISSUER" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"ISSUER":"'$ISSUER_B64'"}}'
            
            # Update jwks uri
            JWKS_URI_B64=$(echo -n "$JWKS_URI" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"JWKS_URI":"'$JWKS_URI_B64'"}}'
            
            # Check if deployment exists first
            if oc get deployment/$RELEASE-backend &>/dev/null; then
              echo "Restarting deployment $RELEASE-backend"
              oc rollout restart deployment/$RELEASE-backend
              echo "Waiting for backend deployment to complete..."
              oc rollout status deployment/$RELEASE-backend --timeout=300s
            else
              echo "Warning: Deployment $RELEASE-backend not found"
            fi

            # Update frontend ConfigMap
            echo "Patching ConfigMap $RELEASE-frontend-config"

            # Create a new default.json content with real values
            CONFIG_JSON=$(cat <<EOF
            {
              "api": {
                "baseUrl": "/api/v1"
              },
              "oidc": {
                "clientId": "${{ secrets.vite_keycloak_client_id }}",
                "realm": "standard",
                "serverUrl": "https://$LOGIN_PROXY/auth",
                "logoutUrl": "https://$LOGIN_PROXY/auth/realms/standard/protocol/openid-connect/logout"
              }
            }
            EOF
            )

            # Create a temporary file with the JSON content
            echo "$CONFIG_JSON" > default.json

            # Force delete and recreate the ConfigMap
            oc delete configmap $RELEASE-frontend-config --ignore-not-found
            oc create configmap $RELEASE-frontend-config --from-file=default.json
            
            # Clean up the temporary file
            rm default.json

            # Replace the pod instead of restarting to ensure ConfigMap is refreshed
            oc delete pods -l app.kubernetes.io/instance=$RELEASE-frontend
            echo "Waiting for frontend deployment to complete..."
            oc rollout status deployment/$RELEASE-frontend --timeout=300s