name: PR Validate

on:
  pull_request_target:  # Changed to pull_request_target for fork safety
    types: [edited, opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-edit-${{ github.event.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  # Security check for fork PRs
  security-check:
    name: Security Check
    runs-on: ubuntu-24.04
    outputs:
      safe-to-run: ${{ steps.check.outputs.safe-to-run }}
    steps:
      - name: Check if safe to run
        id: check
        run: |
          # Check if PR is from a fork
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "PR from fork: ${{ github.event.pull_request.head.repo.full_name }}"
            
            # Check user permissions
            author="${{ github.event.pull_request.user.login }}"
            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/collaborators/$author/permission")
            
            permission=$(echo "$response" | jq -r '.permission // "none"')
            
            if [[ "$permission" == "admin" || "$permission" == "write" || "$permission" == "maintain" ]]; then
              echo "Fork PR from trusted user - safe to run"
              echo "safe-to-run=true" >> $GITHUB_OUTPUT
            else
              echo "Fork PR from external contributor - skipping validation"
              echo "safe-to-run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "PR from same repository - safe to run"
            echo "safe-to-run=true" >> $GITHUB_OUTPUT
          fi

  validate:
    name: Validate PR
    needs: [security-check]
    if: |
      !github.event.pull_request.draft && 
      needs.security-check.outputs.safe-to-run == 'true'
    runs-on: ubuntu-24.04
    steps:
      # Safe checkout - use the PR's SHA
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # Important: For pull_request_target, we need to explicitly checkout the PR head
          # This is safe because we've already done security checks
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Check if title follows conventional commit format
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?:\ .+ ]]; then
            echo "‚ùå PR title doesn't follow conventional commit format"
            echo "Expected format: type(scope): description"
            echo "Example: feat(api): add new endpoint"
            exit 1
          else
            echo "‚úÖ PR title is valid"
          fi

      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          if git merge-tree $(git merge-base HEAD FETCH_HEAD) HEAD FETCH_HEAD | grep -q "<<<<<<<"; then
            echo "‚ùå Merge conflicts detected"
            exit 1
          else
            echo "‚úÖ No merge conflicts"
          fi

      - name: Check file changes
        run: |
          echo "Files changed in this PR:"
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }}

      - name: Add deployment links comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `### üîó Deployment Links

            - [Frontend](https://${{ github.event.repository.name }}-pr-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca)
            
            *Note: Deployment will be available after the PR workflow completes successfully.*`;

            // Check if comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.number }}
            });

            const botComment = comments.find(comment => 
              comment.body.includes('üîó Deployment Links')
            );

            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.number }},
                body: comment
              });
            }

  notify-external:
    name: Notify External Contributor
    needs: [security-check]
    if: needs.security-check.outputs.safe-to-run == 'false'
    runs-on: ubuntu-24.04
    permissions:
      pull-requests: write
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.number }}
            });
            
            // Check if we already posted this message
            const alreadyCommented = comments.some(comment => 
              comment.body.includes('Thank you for your contribution!')
            );
            
            if (!alreadyCommented) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.number }},
                body: `## Thank you for your contribution!
                
                As this PR is from a fork, automatic deployment requires approval from a maintainer for security reasons.
                
                **What happens next:**
                1. A maintainer will review your code
                2. Once approved, they will trigger the deployment
                3. You'll be notified when the PR environment is ready
                
                **For maintainers:** Add a comment with \`/approve\` to allow deployment after code review.`
              });
            }

  results:
    name: Validate Results
    if: always()
    needs: [security-check, validate, notify-external]
    runs-on: ubuntu-24.04
    steps:
      - name: Summary
        run: |
          if [ "${{ needs.security-check.outputs.safe-to-run }}" == "false" ]; then
            echo "‚ÑπÔ∏è Fork PR - waiting for maintainer approval"
            exit 0
          fi
          
          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "‚úÖ Validation completed successfully!"
          elif [ "${{ needs.validate.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è Validation skipped (draft or external PR)"
          else
            echo "‚ùå Validation failed!"
            exit 1
          fi