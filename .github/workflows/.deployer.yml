name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      atomic:
        description: Atomic deployment?  That means fail all or nothing
        default: false
        required: false
        type: boolean
      directory:
        description: Chart directory
        default:  'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: OpenShift server
        required: false
        type: string
      params:
        description: Extra parameters to pass to helm upgrade
        required: false
        type: string
      tags:
        description: Specify a tag to deploy; defaults to PR number
        required: false
        type: string
      triggers:
        description: Paths used to trigger a deployment; e.g. ('./backend/' './frontend/')
        required: false
        type: string
      db_user:
        description: The database user
        required: false
        default: 'app'
        type: string
      debug:
        description: Debug mode
        default: false
        required: false
        type: boolean
      release_name:
        required: true
        type: string
        description: "Release name (e.g., tenant-management-system-dev)"
      preserve_database:
        description: "Preserve existing database data (true for test/prod, false for PRs)"
        default: true
        required: false
        type: boolean

      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 25
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string
      deployment_url:
        description: 'Deployment URL; used for environments'
        required: true
        type: string
      db_triggers:
        description: Paths used to trigger a database deployment; e.g. ('charts/crunchy/')
        required: false
        type: string

    outputs:
      tag:
        description: 'Which tag was used for deployment?'
        value: ${{ jobs.deploy.outputs.tag }}
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploy.outputs.triggered }}

    secrets:
      oc_namespace:
        description: OpenShift namespace
        required: true
      oc_token:
        description: OpenShift token
        required: true
      bcgov_sso_api_client_id:
        required: true
      bcgov_sso_api_client_secret:
        required: true
      vite_keycloak_client_id:
        required: true

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Stack
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.deployment_url }}
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ inputs.tag || steps.pr.outputs.pr }}
      triggered: ${{ steps.deploy.outputs.triggered }}
    steps:
      - name: Get PR number
        if: inputs.tag == ''
        id: pr
        continue-on-error: true  # Don't fail if PR detection fails
        uses: bcgov/action-get-pr@21f9351425cd55a98e869ee28919a512aa30647d

      - name: Set variables
        id: vars
        run: |
          # Simplified tag and release logic
          
          # Tag logic: latest for main/deployment-fix, PR number for actual PRs
          if [ -n "${{ inputs.tag }}" ]; then
            # Use explicit tag if provided
            tag="${{ inputs.tag }}"
          elif [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "deployment-fix" ]; then
            # Use 'latest' for main and deployment-fix branches
            tag="latest"
          elif [ -n "${{ steps.pr.outputs.pr }}" ] && [ "${{ steps.pr.outputs.pr }}" != "null" ] && [ "${{ steps.pr.outputs.pr }}" != "" ]; then
            # Use PR number for actual PR environments
            tag="${{ steps.pr.outputs.pr }}"
          else
            # Final fallback
            tag="latest"
          fi

          # Release name logic - use input release_name directly
          release="${{ inputs.release_name }}"
          
          # Version for helm packaging
          version=1.0.0+${{ github.run_number }}
          
          # Summary
          echo "Branch: ${{ github.ref_name }}"
          echo "Tag: ${tag}"
          echo "Release: ${release}"
          echo "Version: ${version}"
          echo "Preserve DB: ${{ inputs.preserve_database }}"

          # Output
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "release=${release}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check and Handle Concurrent Helm Operations
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          commands: |
            # Enable strict error handling
            set -euo pipefail
            
            RELEASE_NAME="${{ steps.vars.outputs.release }}"
            echo "üîç Checking Helm release status for: $RELEASE_NAME"
            
            # Check current helm status
            if helm list -o json | jq -r '.[] | select(.name=="'$RELEASE_NAME'") | .status' | grep -E "(pending-install|pending-upgrade|pending-rollback)" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Found stuck Helm operation, attempting to resolve..."
              
              # Try to get the current status
              CURRENT_STATUS=$(helm status $RELEASE_NAME -o json | jq -r '.info.status' 2>/dev/null || echo "unknown")
              echo "Current status: $CURRENT_STATUS"
              
              if [[ "$CURRENT_STATUS" =~ pending ]]; then
                echo "üîÑ Attempting to rollback stuck operation..."
                helm rollback $RELEASE_NAME || {
                  echo "‚ùå Rollback failed, attempting uninstall..."
                  helm uninstall $RELEASE_NAME --wait || {
                    echo "‚ùå Uninstall failed, force removing..."
                    # Force cleanup if uninstall fails
                    kubectl delete secret -l owner=helm,name=$RELEASE_NAME --ignore-not-found=true
                  }
                }
                echo "‚úÖ Resolved stuck Helm operation"
              fi
            else
              echo "‚úÖ No stuck Helm operations detected"
            fi

      - name: Deploy Database (Smart Preservation)
        id: deploy_database
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          commands: |
            # Enable strict error handling
            set -euo pipefail
            
            echo "üöÄ DATABASE DEPLOYMENT STARTING..."
            
            # Set database configuration
            RELEASE_NAME="${{ steps.vars.outputs.release }}"
            DB_USER="${{ inputs.db_user }}"
            PRESERVE_DB="${{ inputs.preserve_database }}"
            
            echo "Release name: $RELEASE_NAME"
            echo "Database user: $DB_USER"
            echo "Preserve database: $PRESERVE_DB"
            
            # Generate a consistent password
            DB_PASSWORD=$(echo -n "${RELEASE_NAME}-${DB_USER}" | sha256sum | cut -d' ' -f1 | head -c32)
            
            # Check if database already exists
            if oc get deployment ${RELEASE_NAME}-postgres &>/dev/null; then
              echo "‚úÖ Database deployment already exists"
            else
              echo "‚ùå Database deployment missing - this will be created by Helm"
            fi
            
            if oc get pvc ${RELEASE_NAME}-postgres-data &>/dev/null; then
              echo "‚úÖ Database PVC already exists"
            else
              echo "‚ùå Database PVC missing - this will be created by Helm"
            fi
            
            # Ensure database secret exists
            echo "Creating/updating database secret..."
            oc delete secret ${RELEASE_NAME}-pguser-${DB_USER} --ignore-not-found=true
            oc create secret generic ${RELEASE_NAME}-pguser-${DB_USER} \
              --from-literal=password="$DB_PASSWORD" \
              --from-literal=username="$DB_USER" \
              --from-literal=dbname="app" \
              --from-literal=host="${RELEASE_NAME}-pgbouncer" \
              --from-literal=port="5432"
            
            echo "‚úÖ Database secret created/updated"

      - uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1.4.0
        id: deployment
        with:
          step: start
          token: ${{ github.token }}
          env: ${{ inputs.environment || 'dev' }}
          desc: "Starting deployment..."

      - name: Helm Deploy
        id: deploy
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          triggers: ${{ inputs.triggers }}
          ref: ${{ github.ref }}
          commands: |
            # Enable strict error handling
            set -euo pipefail
            
            # If directory provided, cd to it
            [ -z "${{ inputs.directory }}" ] || cd ${{ inputs.directory }}

            # Set database alias to match what was created
            DATABASE_ALIAS="${{ steps.vars.outputs.release }}"
            echo "Setting database alias to: $DATABASE_ALIAS"

            RELEASE_NAME="${{ steps.vars.outputs.release }}"
            
            # Function to check for stuck operations and resolve them
            check_and_resolve_stuck_operations() {
              local release_name="$1"
              echo "üîç Checking for stuck operations on: $release_name"
              
              # Get current status with better error handling
              local current_status
              if current_status=$(helm status "$release_name" -o json 2>/dev/null | jq -r '.info.status'); then
                echo "Current Helm status: $current_status"
                
                case "$current_status" in
                  "pending-install"|"pending-upgrade"|"pending-rollback")
                    echo "‚ö†Ô∏è Found stuck operation: $current_status"
                    echo "üîÑ Attempting to resolve..."
                    
                    # Try rollback first
                    if helm rollback "$release_name" 2>/dev/null; then
                      echo "‚úÖ Successfully rolled back stuck operation"
                      sleep 5
                      return 0
                    fi
                    
                    # If rollback fails, try uninstall
                    echo "‚ö†Ô∏è Rollback failed, attempting uninstall..."
                    if helm uninstall "$release_name" --wait --timeout=300s 2>/dev/null; then
                      echo "‚úÖ Successfully uninstalled stuck release"
                      sleep 5
                      return 0
                    fi
                    
                    # If uninstall fails, force cleanup
                    echo "‚ö†Ô∏è Uninstall failed, forcing cleanup..."
                    kubectl delete secret -l owner=helm,name="$release_name" --ignore-not-found=true
                    kubectl delete configmap -l owner=helm,name="$release_name" --ignore-not-found=true
                    sleep 5
                    ;;
                  "deployed"|"failed")
                    echo "‚úÖ Release is in stable state: $current_status"
                    ;;
                  *)
                    echo "‚ö†Ô∏è Unknown status: $current_status"
                    ;;
                esac
              else
                echo "‚ÑπÔ∏è Release does not exist yet or status check failed"
              fi
              
              return 0
            }
            
            # Function to perform helm upgrade with retry logic
            perform_helm_upgrade() {
              local release_name="$1"
              local max_attempts=5
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "üöÄ Helm deployment attempt $attempt/$max_attempts..."
                
                # Check for stuck operations before each attempt
                check_and_resolve_stuck_operations "$release_name"
                
                # Attempt the upgrade
                if helm upgrade \
                  --set-string global.repository=${{ github.repository }} \
                  --set-string global.tag="${{ steps.vars.outputs.tag }}" \
                  --set-string global.config.databaseUser="${{ inputs.db_user }}" \
                  --set-string global.config.nodeEnv=${{ (inputs.environment == 'prod' || inputs.environment == 'production') && 'production' || (inputs.environment == 'test' && 'test' || 'development') }} \
                  --set-string global.databaseAlias="$DATABASE_ALIAS" \
                  --set-string global.secrets.enabled=true \
                  --set-string global.preserveDatabase="${{ inputs.preserve_database }}" \
                  ${{ inputs.params }} \
                  --install --wait ${{ inputs.atomic && '--atomic' || '' }} "$release_name" \
                  --timeout ${{ inputs.timeout-minutes }}m \
                  --values ${{ inputs.values }} \
                  ./${{ github.event.repository.name }}-${{ steps.pr.outputs.pr || steps.vars.outputs.version }}.tgz; then
                  
                  echo "‚úÖ Helm deployment completed successfully on attempt $attempt"
                  return 0
                else
                  local exit_code=$?
                  echo "‚ùå Helm deployment failed on attempt $attempt (exit code: $exit_code)"
                  
                  if [ $attempt -eq $max_attempts ]; then
                    echo "üí• All attempts failed, giving up"
                    return $exit_code
                  fi
                  
                  echo "‚è≥ Waiting 30 seconds before retry..."
                  sleep 30
                  attempt=$((attempt + 1))
                fi
              done
            }

            # Initial check and cleanup
            check_and_resolve_stuck_operations "$RELEASE_NAME"

            # Helm package
            sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
            helm package -u . --app-version="tag-${{ steps.vars.outputs.tag }}_run-${{ github.run_number }}" --version=${{ steps.pr.outputs.pr || steps.vars.outputs.version }}
            
            # Perform the deployment with retry logic
            perform_helm_upgrade "$RELEASE_NAME"

            # Helm release history
            helm history "$RELEASE_NAME"

            # Clean up completed pods
            oc delete po --field-selector=status.phase==Succeeded --ignore-not-found=true || true

      - name: Update secrets
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          commands: |
            # Get release name
            RELEASE="${{ inputs.release_name }}"
            
            # Wait for backend secret to exist (created by helm)
            echo "Waiting for backend secret to be created by helm..."
            for i in {1..30}; do
              if oc get secret $RELEASE-backend &>/dev/null; then
                echo "‚úÖ Backend secret found"
                break
              fi
              echo "Attempt $i/30: Backend secret not found yet, waiting..."
              sleep 2
            done
            
            if ! oc get secret $RELEASE-backend &>/dev/null; then
              echo "‚ùå Backend secret was not created by helm"
              exit 1
            fi
            
            # Update secrets with real values
            echo "Updating backend secret with real SSO values..."
            
            # Set appropriate login proxy URL based on environment
            if [[ "${{ inputs.environment }}" == "prod" ]]; then
              LOGIN_PROXY="loginproxy.gov.bc.ca"
              ISSUER="https://loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            elif [[ "${{ inputs.environment }}" == "test" ]]; then
              LOGIN_PROXY="test.loginproxy.gov.bc.ca"  
              ISSUER="https://test.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://test.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            else
              LOGIN_PROXY="dev.loginproxy.gov.bc.ca"
              ISSUER="https://dev.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            fi

            # Update client ID
            CLIENT_ID=$(echo -n "${{ secrets.bcgov_sso_api_client_id }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_ID":"'$CLIENT_ID'"}}'

            # Update client secret 
            CLIENT_SECRET=$(echo -n "${{ secrets.bcgov_sso_api_client_secret }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_SECRET":"'$CLIENT_SECRET'"}}'

            # Update issuer
            ISSUER_B64=$(echo -n "$ISSUER" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"ISSUER":"'$ISSUER_B64'"}}'

            # Update jwks uri
            JWKS_URI_B64=$(echo -n "$JWKS_URI" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"JWKS_URI":"'$JWKS_URI_B64'"}}'

            echo "‚úÖ Backend secret updated with real values"

            # Restart backend deployment to pick up new secrets
            if oc get deployment/$RELEASE-backend &>/dev/null; then
              echo "Restarting backend deployment..."
              oc rollout restart deployment/$RELEASE-backend
              echo "Waiting for backend deployment to complete..."
              oc rollout status deployment/$RELEASE-backend --timeout=300s
            else
              echo "Warning: Backend deployment not found: $RELEASE-backend"
            fi

            # Update frontend ConfigMap
            echo "Updating frontend configuration..."

            # Create frontend config JSON
            CONFIG_JSON=$(cat <<EOF
            {
              "api": {
                "baseUrl": "/api/v1"
              },
              "oidc": {
                "clientId": "${{ secrets.vite_keycloak_client_id }}",
                "realm": "standard",
                "serverUrl": "https://$LOGIN_PROXY/auth",
                "logoutUrl": "https://$LOGIN_PROXY/auth/realms/standard/protocol/openid-connect/logout"
              }
            }
            EOF
            )

            # Update frontend ConfigMap
            if oc get configmap $RELEASE-frontend-config &>/dev/null; then
              echo "Updating existing frontend ConfigMap..."
              oc delete configmap $RELEASE-frontend-config
            fi

            echo "$CONFIG_JSON" | oc create configmap $RELEASE-frontend-config --from-file=default.json=/dev/stdin

            echo "‚úÖ Frontend ConfigMap updated"

            # Restart frontend deployment to pick up new config
            if oc get deployment/$RELEASE-frontend &>/dev/null; then
              echo "Restarting frontend deployment..."
              oc delete pods -l app.kubernetes.io/name=frontend,app.kubernetes.io/instance=$RELEASE
              echo "Waiting for frontend deployment to complete..."
              oc rollout status deployment/$RELEASE-frontend --timeout=300s
            else
              echo "Warning: Frontend deployment not found: $RELEASE-frontend"
            fi

            echo "‚úÖ All secrets and configurations updated successfully"

      - name: Update deployment status
        uses: bobheadxi/deployments@v1.4.0
        if: always() && steps.deployment.outputs.deployment_id
        with:
          step: finish
          token: ${{ github.token }}
          status: ${{ job.status }}
          env: ${{ inputs.environment || 'dev' }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ inputs.deployment_url }}

      - name: Log deployment status (fallback)
        if: always() && !steps.deployment.outputs.deployment_id
        run: |
          echo "‚ö†Ô∏è Deployment tracking was not initialized properly"
          echo "Job status: ${{ job.status }}"
          echo "Environment: ${{ inputs.environment || 'dev' }}"
          echo "URL: ${{ inputs.deployment_url }}"