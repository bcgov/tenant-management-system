name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      atomic:
        description: Atomic deployment?  That means fail all or nothing
        default: false
        required: false
        type: boolean
      directory:
        description: Chart directory
        default:  'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: OpenShift server
        required: false
        type: string
      params:
        description: Extra parameters to pass to helm upgrade
        required: false
        type: string
      tags:
        description: Specify a tag to deploy; defaults to PR number
        required: false
        type: string
      triggers:
        description: Paths used to trigger a deployment; e.g. ('./backend/' './frontend/')
        required: false
        type: string
      db_user:
        description: The database user
        required: false
        default: 'app'
        type: string
      debug:
        description: Debug mode
        default: false
        required: false
        type: boolean
      release_name:
        required: true
        type: string
        description: "Release name (e.g., tenant-management-system-dev)"
      preserve_database:
        description: "Preserve existing database data (true for test/prod, false for PRs)"
        default: true
        required: false
        type: boolean

      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string
      deployment_url:
        description: 'Deployment URL; used for environments'
        required: true
        type: string
      db_triggers:
        description: Paths used to trigger a database deployment; e.g. ('charts/crunchy/')
        required: false
        type: string

    outputs:
      tag:
        description: 'Which tag was used for deployment?'
        value: ${{ jobs.deploy.outputs.tag }}
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploy.outputs.triggered }}

    secrets:
      oc_namespace:
        description: OpenShift namespace
        required: true
      oc_token:
        description: OpenShift token
        required: true
      bcgov_sso_api_client_id:
        required: true
      bcgov_sso_api_client_secret:
        required: true
      vite_keycloak_client_id:
        required: true

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Stack
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.deployment_url }}
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ inputs.tag || steps.pr.outputs.pr }}
      triggered: ${{ steps.deploy.outputs.triggered }}
    steps:
      # Variables - Simplified tag logic
      - if: inputs.tag  == ''
        id: pr
        continue-on-error: true  # Don't fail if PR detection fails
        uses: bcgov/action-get-pr@21f9351425cd55a98e869ee28919a512aa30647d

      - id: vars
        run: |
          # Simplified tag and release logic
          
          # Tag logic: latest for main/deployment-fix, PR number for actual PRs
          if [ -n "${{ inputs.tag }}" ]; then
            # Use explicit tag if provided
            tag="${{ inputs.tag }}"
          elif [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "deployment-fix" ]; then
            # Use 'latest' for main and deployment-fix branches
            tag="latest"
          elif [ -n "${{ steps.pr.outputs.pr }}" ] && [ "${{ steps.pr.outputs.pr }}" != "null" ] && [ "${{ steps.pr.outputs.pr }}" != "" ]; then
            # Use PR number for actual PR environments
            tag="${{ steps.pr.outputs.pr }}"
          else
            # Final fallback
            tag="latest"
          fi

          # Release name logic - use input release_name directly
          release="${{ inputs.release_name }}"
          
          # Version for helm packaging
          version=1.0.0+${{ github.run_number }}
          
          # Summary
          echo "Branch: ${{ github.ref_name }}"
          echo "Tag: ${tag}"
          echo "Release: ${release}"
          echo "Version: ${version}"
          echo "Preserve DB: ${{ inputs.preserve_database }}"

          # Output
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "release=${release}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Deploy Database (Smart Preservation)
        id: deploy_database
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          triggers: ${{ inputs.db_triggers }}
          commands: |
            # Set database configuration
            RELEASE_NAME="${{ steps.vars.outputs.release }}"
            DB_USER="${{ inputs.db_user }}"
            PRESERVE_DB="${{ inputs.preserve_database }}"
            
            echo "Release name: $RELEASE_NAME"
            echo "Database user: $DB_USER"
            echo "Preserve database: $PRESERVE_DB"
            
            # Generate a consistent password
            DB_PASSWORD=$(echo -n "${RELEASE_NAME}-${DB_USER}" | sha256sum | cut -d' ' -f1 | head -c32)
            
            # Check if database already exists
            DB_EXISTS=false
            DB_DEPLOYMENT_EXISTS=false
            DB_PVC_EXISTS=false
            
            if oc get deployment ${RELEASE_NAME}-postgres &>/dev/null; then
              echo "‚úÖ Database deployment already exists"
              DB_EXISTS=true
              DB_DEPLOYMENT_EXISTS=true
            fi
            
            if oc get pvc ${RELEASE_NAME}-postgres-data &>/dev/null; then
              echo "‚úÖ Database PVC already exists"
              DB_EXISTS=true
              DB_PVC_EXISTS=true
            fi
            
            # Decision logic: preserve or recreate
            if [ "$DB_EXISTS" = true ] && [ "$PRESERVE_DB" = true ]; then
              echo "üîÑ PRESERVING existing database and data"
              
              # Ensure database secret exists with correct values
              echo "Creating/updating database secret..."
              oc delete secret ${RELEASE_NAME}-pguser-${DB_USER} --ignore-not-found=true
              oc create secret generic ${RELEASE_NAME}-pguser-${DB_USER} \
                --from-literal=password="$DB_PASSWORD" \
                --from-literal=username="$DB_USER" \
                --from-literal=dbname="app" \
                --from-literal=host="${RELEASE_NAME}-pgbouncer" \
                --from-literal=port="5432"
              
              # Ensure database service exists
              if ! oc get service ${RELEASE_NAME}-pgbouncer &>/dev/null; then
                echo "Creating missing database service..."
                cat <<EOF | oc apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: ${RELEASE_NAME}-pgbouncer
              labels:
                app: postgres
                instance: $RELEASE_NAME
            spec:
              selector:
                app: postgres
                instance: $RELEASE_NAME
              ports:
              - port: 5432
                targetPort: 5432
                name: postgres
              type: ClusterIP
            EOF
              fi
              
              # Verify database deployment is healthy
              if [ "$DB_DEPLOYMENT_EXISTS" = true ]; then
                echo "Checking database deployment health..."
                if ! oc rollout status deployment/${RELEASE_NAME}-postgres --timeout=60s &>/dev/null; then
                  echo "Database deployment not healthy, restarting..."
                  oc rollout restart deployment/${RELEASE_NAME}-postgres
                  oc rollout status deployment/${RELEASE_NAME}-postgres --timeout=300s
                fi
              else
                echo "‚ö†Ô∏è PVC exists but deployment missing, recreating deployment only..."
                # Create deployment but use existing PVC
                cat <<EOF | oc apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: ${RELEASE_NAME}-postgres
              labels:
                app: postgres
                instance: $RELEASE_NAME
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: postgres
                  instance: $RELEASE_NAME
              template:
                metadata:
                  labels:
                    app: postgres
                    instance: $RELEASE_NAME
                spec:
                  containers:
                  - name: postgres
                    image: postgres:15
                    env:
                    - name: POSTGRES_DB
                      value: "app"
                    - name: POSTGRES_USER
                      value: "$DB_USER"
                    - name: POSTGRES_PASSWORD
                      value: "$DB_PASSWORD"
                    - name: PGDATA
                      value: /var/lib/postgresql/data/pgdata
                    ports:
                    - containerPort: 5432
                      name: postgres
                    volumeMounts:
                    - name: postgres-data
                      mountPath: /var/lib/postgresql/data
                    resources:
                      requests:
                        cpu: "100m"
                        memory: "256Mi"
                      limits:
                        cpu: "500m"
                        memory: "512Mi"
                    readinessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - pg_isready -U $DB_USER -d app
                      initialDelaySeconds: 15
                      periodSeconds: 5
                      failureThreshold: 6
                    livenessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - pg_isready -U $DB_USER -d app
                      initialDelaySeconds: 45
                      periodSeconds: 10
                      failureThreshold: 6
                  volumes:
                  - name: postgres-data
                    persistentVolumeClaim:
                      claimName: ${RELEASE_NAME}-postgres-data
            EOF
                oc rollout status deployment/${RELEASE_NAME}-postgres --timeout=300s
              fi
              
            else
              echo "üÜï CREATING new database (preserve_db=$PRESERVE_DB, exists=$DB_EXISTS)"
              
              # Clean up any existing resources if preserve_database is false
              if [ "$PRESERVE_DB" = false ]; then
                echo "Cleaning up existing database resources..."
                oc delete deployment,service,pvc -l app=postgres,instance=$RELEASE_NAME --ignore-not-found=true
                # Wait for resources to be deleted
                sleep 10
              fi
              
              echo "Creating database secret..."
              oc delete secret ${RELEASE_NAME}-pguser-${DB_USER} --ignore-not-found=true
              oc create secret generic ${RELEASE_NAME}-pguser-${DB_USER} \
                --from-literal=password="$DB_PASSWORD" \
                --from-literal=username="$DB_USER" \
                --from-literal=dbname="app" \
                --from-literal=host="${RELEASE_NAME}-pgbouncer" \
                --from-literal=port="5432"
              
              echo "Deploying fresh PostgreSQL database..."
              
              # Deploy PostgreSQL database
              cat <<EOF | oc apply -f -
            # PostgreSQL PVC
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: ${RELEASE_NAME}-postgres-data
              labels:
                app: postgres
                instance: $RELEASE_NAME
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 3Gi
              storageClassName: netapp-file-standard
            ---
            # PostgreSQL Deployment
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: ${RELEASE_NAME}-postgres
              labels:
                app: postgres
                instance: $RELEASE_NAME
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: postgres
                  instance: $RELEASE_NAME
              template:
                metadata:
                  labels:
                    app: postgres
                    instance: $RELEASE_NAME
                spec:
                  containers:
                  - name: postgres
                    image: postgres:15
                    env:
                    - name: POSTGRES_DB
                      value: "app"
                    - name: POSTGRES_USER
                      value: "$DB_USER"
                    - name: POSTGRES_PASSWORD
                      value: "$DB_PASSWORD"
                    - name: PGDATA
                      value: /var/lib/postgresql/data/pgdata
                    ports:
                    - containerPort: 5432
                      name: postgres
                    volumeMounts:
                    - name: postgres-data
                      mountPath: /var/lib/postgresql/data
                    resources:
                      requests:
                        cpu: "100m"
                        memory: "256Mi"
                      limits:
                        cpu: "500m"
                        memory: "512Mi"
                    readinessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - pg_isready -U $DB_USER -d app
                      initialDelaySeconds: 15
                      periodSeconds: 5
                      failureThreshold: 6
                    livenessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - pg_isready -U $DB_USER -d app
                      initialDelaySeconds: 45
                      periodSeconds: 10
                      failureThreshold: 6
                  volumes:
                  - name: postgres-data
                    persistentVolumeClaim:
                      claimName: ${RELEASE_NAME}-postgres-data
            ---
            # PostgreSQL Service (with pgbouncer name for compatibility)
            apiVersion: v1
            kind: Service
            metadata:
              name: ${RELEASE_NAME}-pgbouncer
              labels:
                app: postgres
                instance: $RELEASE_NAME
            spec:
              selector:
                app: postgres
                instance: $RELEASE_NAME
              ports:
              - port: 5432
                targetPort: 5432
                name: postgres
              type: ClusterIP
            EOF
              
              echo "Waiting for PostgreSQL to be ready..."
              oc wait --for=condition=available --timeout=300s deployment/${RELEASE_NAME}-postgres
              oc wait --for=condition=ready --timeout=180s pod -l app=postgres,instance=$RELEASE_NAME
            fi
            
            # Test database connection
            echo "Testing database connection..."
            POD_NAME=$(oc get pods -l app=postgres,instance=$RELEASE_NAME -o jsonpath='{.items[0].metadata.name}')
            if [ -n "$POD_NAME" ]; then
              echo "Testing connection on pod: $POD_NAME"
              # Simple connection test
              oc exec $POD_NAME -- psql -U $DB_USER -d app -c "SELECT 1;" || {
                echo "Database connection test failed"
                oc logs $POD_NAME
                exit 1
              }
              echo "‚úÖ Database connection test successful"
            else
              echo "‚ùå No database pod found"
              exit 1
            fi
            
            if [ "$PRESERVE_DB" = true ] && [ "$DB_EXISTS" = true ]; then
              echo "‚úÖ Database ready (existing data preserved)"
            else
              echo "‚úÖ Database ready (fresh installation)"
            fi
            
            echo "Database details:"
            echo "  Host: ${RELEASE_NAME}-pgbouncer"
            echo "  Port: 5432"
            echo "  Database: app"
            echo "  User: $DB_USER"
            echo "  Secret: ${RELEASE_NAME}-pguser-${DB_USER}"

      - name: Stop pre-existing deployments on PRs (status = pending-upgrade)
        if: github.event_name == 'pull_request'
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          triggers: ${{ inputs.triggers }}
          commands: |
            # Interrupt any previous deployments (PR only)
            PREVIOUS=$(helm status ${{ steps.vars.outputs.release }} -o json | jq .info.status || true)
            if [[ ${PREVIOUS} =~ pending ]]; then
              echo "Rollback triggered"
              helm rollback ${{ steps.vars.outputs.release }} || \
                helm uninstall ${{ steps.vars.outputs.release }}
            fi

      - uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1.4.0
        id: deployment
        with:
          step: start
          token: ${{ github.token }}
          env: ${{ inputs.environment || 'dev' }}
          desc: "Starting deployment..."

      - name: Helm Deploy
        id: deploy
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          triggers: ${{ inputs.triggers }}
          ref: ${{ github.ref }}
          commands: |
            # If directory provided, cd to it
            [ -z "${{ inputs.directory }}" ] || cd ${{ inputs.directory }}

            # Set database alias to match what was created
            DATABASE_ALIAS="${{ steps.vars.outputs.release }}"
            echo "Setting database alias to: $DATABASE_ALIAS"

            # Helm package
            sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
            helm package -u . --app-version="tag-${{ steps.vars.outputs.tag }}_run-${{ github.run_number }}" --version=${{ steps.pr.outputs.pr || steps.vars.outputs.version }}
            
            # Helm upgrade/rollout with proper database configuration
            helm upgrade \
              --set-string global.repository=${{ github.repository }} \
              --set-string global.tag="${{ steps.vars.outputs.tag }}" \
              --set-string global.config.databaseUser="${{ inputs.db_user }}" \
              --set-string global.config.nodeEnv=${{ (inputs.environment == 'prod' || inputs.environment == 'production') && 'production' || (inputs.environment == 'test' && 'test' || 'development') }} \
              --set-string global.databaseAlias="$DATABASE_ALIAS" \
              --set-string global.secrets.enabled=true \
              --set-string global.preserveDatabase="${{ inputs.preserve_database }}" \
              ${{ inputs.params }} \
              --install --wait ${{ inputs.atomic && '--atomic' || '' }} ${{ steps.vars.outputs.release }} \
              --timeout ${{ inputs.timeout-minutes }}m \
              --values ${{ inputs.values }} \
              ./${{ github.event.repository.name }}-${{ steps.pr.outputs.pr || steps.vars.outputs.version }}.tgz

            # Helm release history
            helm history ${{ steps.vars.outputs.release }}

            # Clean up completed pods
            oc delete po --field-selector=status.phase==Succeeded || true

      - name: Update secrets
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          commands: |
            # Get release name
            RELEASE="${{ inputs.release_name }}"
            
            # Wait for backend secret to exist (created by helm)
            echo "Waiting for backend secret to be created by helm..."
            for i in {1..30}; do
              if oc get secret $RELEASE-backend &>/dev/null; then
                echo "‚úÖ Backend secret found"
                break
              fi
              echo "Attempt $i/30: Backend secret not found yet, waiting..."
              sleep 2
            done
            
            if ! oc get secret $RELEASE-backend &>/dev/null; then
              echo "‚ùå Backend secret was not created by helm"
              exit 1
            fi
            
            # Update secrets with real values
            echo "Updating backend secret with real SSO values..."
            
            # Set appropriate login proxy URL based on environment
            if [[ "${{ inputs.environment }}" == "prod" ]]; then
              LOGIN_PROXY="loginproxy.gov.bc.ca"
              ISSUER="https://loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            elif [[ "${{ inputs.environment }}" == "test" ]]; then
              LOGIN_PROXY="test.loginproxy.gov.bc.ca"  
              ISSUER="https://test.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://test.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            else
              LOGIN_PROXY="dev.loginproxy.gov.bc.ca"
              ISSUER="https://dev.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            fi

            # Update client ID
            CLIENT_ID=$(echo -n "${{ secrets.bcgov_sso_api_client_id }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_ID":"'$CLIENT_ID'"}}'
            
            # Update client secret 
            CLIENT_SECRET=$(echo -n "${{ secrets.bcgov_sso_api_client_secret }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_SECRET":"'$CLIENT_SECRET'"}}'
            
            # Update issuer
            ISSUER_B64=$(echo -n "$ISSUER" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"ISSUER":"'$ISSUER_B64'"}}'
            
            # Update jwks uri
            JWKS_URI_B64=$(echo -n "$JWKS_URI" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"JWKS_URI":"'$JWKS_URI_B64'"}}'
            
            echo "‚úÖ Backend secret updated with real values"

            # Restart backend deployment to pick up new secrets
            if oc get deployment/$RELEASE-backend &>/dev/null; then
              echo "Restarting backend deployment..."
              oc rollout restart deployment/$RELEASE-backend
              echo "Waiting for backend deployment to complete..."
              oc rollout status deployment/$RELEASE-backend --timeout=300s
            else
              echo "Warning: Backend deployment not found: $RELEASE-backend"
            fi

            # Update frontend ConfigMap
            echo "Updating frontend configuration..."
            
            # Create frontend config JSON
            CONFIG_JSON=$(cat <<EOF
            {
              "api": {
                "baseUrl": "/api/v1"
              },
              "oidc": {
                "clientId": "${{ secrets.vite_keycloak_client_id }}",
                "realm": "standard",
                "serverUrl": "https://$LOGIN_PROXY/auth",
                "logoutUrl": "https://$LOGIN_PROXY/auth/realms/standard/protocol/openid-connect/logout"
              }
            }
            EOF
            )

            # Update frontend ConfigMap
            if oc get configmap $RELEASE-frontend-config &>/dev/null; then
              echo "Updating existing frontend ConfigMap..."
              oc delete configmap $RELEASE-frontend-config
            fi
            
            echo "$CONFIG_JSON" | oc create configmap $RELEASE-frontend-config --from-file=default.json=/dev/stdin
            
            echo "‚úÖ Frontend ConfigMap updated"

            # Restart frontend deployment to pick up new config
            if oc get deployment/$RELEASE-frontend &>/dev/null; then
              echo "Restarting frontend deployment..."
              oc delete pods -l app.kubernetes.io/name=frontend,app.kubernetes.io/instance=$RELEASE
              echo "Waiting for frontend deployment to complete..."
              oc rollout status deployment/$RELEASE-frontend --timeout=300s
            else
              echo "Warning: Frontend deployment not found: $RELEASE-frontend"
            fi
            
            echo "‚úÖ All secrets and configurations updated successfully"

      - name: Update deployment status
        uses: bobheadxi/deployments@v1.4.0
        if: always() && steps.deployment.outputs.deployment_id
        with:
          step: finish
          token: ${{ github.token }}
          status: ${{ job.status }}
          env: ${{ inputs.environment || 'dev' }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ inputs.deployment_url }}

      - name: Log deployment status (fallback)
        if: always() && !steps.deployment.outputs.deployment_id
        run: |
          echo "‚ö†Ô∏è Deployment tracking was not initialized properly"
          echo "Job status: ${{ job.status }}"
          echo "Environment: ${{ inputs.environment || 'dev' }}"
          echo "URL: ${{ inputs.deployment_url }}"