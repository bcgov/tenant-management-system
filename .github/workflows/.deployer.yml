name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      atomic:
        description: Atomic deployment?  That means fail all or nothing
        default: false
        required: false
        type: boolean
      directory:
        description: Chart directory
        default: 'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: OpenShift server
        required: false
        type: string
      params:
        description: Extra parameters to pass to helm upgrade
        required: false
        type: string
      tags:
        description: Specify a tag to deploy; defaults to PR number
        required: false
        type: string
      triggers:
        description: Paths used to trigger a deployment; e.g. ('./backend/' './frontend/')
        required: false
        type: string
      db_user:
        description: The database user
        required: false
        default: 'app'
        type: string
      debug:
        description: Debug mode
        default: false
        required: false
        type: boolean
      release_name:
        required: true
        type: string
        description: "Release name (e.g., tenant-management-system-dev)"
      preserve_database:
        description: "Preserve existing database data (true for test/prod, false for PRs)"
        default: true
        required: false
        type: boolean

      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 25
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string
      deployment_url:
        description: 'Deployment URL; used for environments'
        required: true
        type: string
      db_triggers:
        description: Paths used to trigger a database deployment; e.g. ('charts/crunchy/')
        required: false
        type: string

    outputs:
      tag:
        description: 'Which tag was used for deployment?'
        value: ${{ jobs.deploy.outputs.tag }}
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploy.outputs.triggered }}

    secrets:
      oc_namespace:
        description: OpenShift namespace
        required: true
      oc_token:
        description: OpenShift token
        required: true
      bcgov_sso_api_client_id:
        required: true
      bcgov_sso_api_client_secret:
        required: true
      vite_keycloak_client_id:
        required: true

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Stack
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.deployment_url }}
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ inputs.tag || steps.pr.outputs.pr }}
      triggered: ${{ steps.deploy.outputs.triggered }}
    steps:
      - name: Get PR number
        if: inputs.tag == ''
        id: pr
        continue-on-error: true  # Don't fail if PR detection fails
        uses: bcgov/action-get-pr@21f9351425cd55a98e869ee28919a512aa30647d

      - name: Set variables
        id: vars
        run: |
          # Simplified tag and release logic
          
          # Tag logic: latest for main/deployment-fix, PR number for actual PRs
          if [ -n "${{ inputs.tag }}" ]; then
            # Use explicit tag if provided
            tag="${{ inputs.tag }}"
          elif [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "deployment-fix" ]; then
            # Use 'latest' for main and deployment-fix branches
            tag="latest"
          elif [ -n "${{ steps.pr.outputs.pr }}" ] && [ "${{ steps.pr.outputs.pr }}" != "null" ] && [ "${{ steps.pr.outputs.pr }}" != "" ]; then
            # Use PR number for actual PR environments
            tag="${{ steps.pr.outputs.pr }}"
          else
            # Final fallback
            tag="latest"
          fi

          # Release name logic - use input release_name directly
          release="${{ inputs.release_name }}"
          
          # Version for helm packaging
          version=1.0.0+${{ github.run_number }}
          
          # Summary
          echo "Branch: ${{ github.ref_name }}"
          echo "Tag: ${tag}"
          echo "Release: ${release}"
          echo "Version: ${version}"
          echo "Preserve DB: ${{ inputs.preserve_database }}"

          # Output
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "release=${release}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Deploy Database (Smart Preservation)
  id: deploy_database
  uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
  with:
    oc_namespace: ${{ secrets.oc_namespace }}
    oc_token: ${{ secrets.oc_token }}
    oc_server: ${{ inputs.oc_server }}
    commands: |
      # Enable strict error handling and debugging
      set -euo pipefail
      
      echo "🚀 DATABASE DEPLOYMENT STARTING..."
      
      # Set database configuration
      RELEASE_NAME="${{ steps.vars.outputs.release }}"
      DB_USER="${{ inputs.db_user }}"
      PRESERVE_DB="${{ inputs.preserve_database }}"
      
      echo "Release name: $RELEASE_NAME"
      echo "Database user: $DB_USER"
      echo "Preserve database: $PRESERVE_DB"
      
      # Validate required variables
      if [ -z "$RELEASE_NAME" ]; then
        echo "❌ RELEASE_NAME is empty!"
        exit 1
      fi
      
      if [ -z "$DB_USER" ]; then
        echo "❌ DB_USER is empty!"
        exit 1
      fi
      
      # Generate a consistent password
      DB_PASSWORD=$(echo -n "${RELEASE_NAME}-${DB_USER}" | sha256sum | cut -d' ' -f1 | head -c32)
      echo "Generated password hash for database"
      
      # Create the database user secret that Helm chart expects
      echo "Creating database user secret for Helm chart..."
      oc delete secret ${RELEASE_NAME}-pguser-${DB_USER} --ignore-not-found=true
      oc create secret generic ${RELEASE_NAME}-pguser-${DB_USER} \
        --from-literal=password="$DB_PASSWORD" \
        --from-literal=username="$DB_USER" \
        --from-literal=dbname="app" \
        --from-literal=host="${RELEASE_NAME}-pgbouncer" \
        --from-literal=port="5432"
      echo "✅ Database secret created for Helm chart"
      
      # Check if we're using Crunchy PostgreSQL or simple PostgreSQL
      echo "Checking existing database deployments..."
      
      # Check for Crunchy PostgreSQL cluster
      CRUNCHY_EXISTS=false
      if oc get postgrescluster ${RELEASE_NAME}-crunchy &>/dev/null; then
        echo "✅ Crunchy PostgreSQL cluster already exists"
        CRUNCHY_EXISTS=true
      fi
      
      # Check for simple PostgreSQL deployment
      SIMPLE_PG_EXISTS=false
      if oc get deployment ${RELEASE_NAME}-postgres &>/dev/null; then
        echo "✅ Simple PostgreSQL deployment already exists"
        SIMPLE_PG_EXISTS=true
      fi
      
      # Clean up conflicting deployments if preserve_database is false
      if [ "$PRESERVE_DB" = false ]; then
        echo "🧹 Cleaning up existing database resources (preserve_database=false)..."
        # Clean up Crunchy resources
        oc delete postgrescluster ${RELEASE_NAME}-crunchy --ignore-not-found=true
        # Clean up simple PostgreSQL resources
        oc delete deployment,service,pvc -l app=postgres,instance=$RELEASE_NAME --ignore-not-found=true
        sleep 10
        CRUNCHY_EXISTS=false
        SIMPLE_PG_EXISTS=false
      fi
      
      # If no database exists, create a simple PostgreSQL deployment
      # (Helm chart will handle Crunchy if enabled in values)
      if [ "$CRUNCHY_EXISTS" = false ] && [ "$SIMPLE_PG_EXISTS" = false ]; then
        echo "🆕 Creating simple PostgreSQL deployment for Helm chart..."
        
        # Create a basic PostgreSQL deployment that Helm can manage
        cat <<EOF | oc apply -f -
      # PostgreSQL PVC
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: ${RELEASE_NAME}-postgres-data
        labels:
          app: postgres
          instance: $RELEASE_NAME
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 3Gi
        storageClassName: netapp-file-standard
      ---
      # PostgreSQL Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${RELEASE_NAME}-postgres
        labels:
          app: postgres
          instance: $RELEASE_NAME
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: postgres
            instance: $RELEASE_NAME
        template:
          metadata:
            labels:
              app: postgres
              instance: $RELEASE_NAME
          spec:
            containers:
            - name: postgres
              image: postgres:15
              env:
              - name: POSTGRES_DB
                value: "app"
              - name: POSTGRES_USER
                value: "$DB_USER"
              - name: POSTGRES_PASSWORD
                value: "$DB_PASSWORD"
              - name: PGDATA
                value: /var/lib/postgresql/data/pgdata
              ports:
              - containerPort: 5432
                name: postgres
              volumeMounts:
              - name: postgres-data
                mountPath: /var/lib/postgresql/data
              resources:
                requests:
                  cpu: "100m"
                  memory: "256Mi"
                limits:
                  cpu: "500m"
                  memory: "512Mi"
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - pg_isready -U $DB_USER -d app
                initialDelaySeconds: 15
                periodSeconds: 5
                failureThreshold: 6
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - pg_isready -U $DB_USER -d app
                initialDelaySeconds: 45
                periodSeconds: 10
                failureThreshold: 6
            volumes:
            - name: postgres-data
              persistentVolumeClaim:
                claimName: ${RELEASE_NAME}-postgres-data
      ---
      # PostgreSQL Service (pgbouncer name for compatibility)
      apiVersion: v1
      kind: Service
      metadata:
        name: ${RELEASE_NAME}-pgbouncer
        labels:
          app: postgres
          instance: $RELEASE_NAME
      spec:
        selector:
          app: postgres
          instance: $RELEASE_NAME
        ports:
        - port: 5432
          targetPort: 5432
          name: postgres
        type: ClusterIP
      EOF
        
        echo "✅ Simple PostgreSQL deployment created"
        echo "Waiting for PostgreSQL to be ready..."
        oc wait --for=condition=available --timeout=300s deployment/${RELEASE_NAME}-postgres
        oc wait --for=condition=ready --timeout=180s pod -l app=postgres,instance=$RELEASE_NAME
      else
        echo "ℹ️ Database already exists, skipping creation"
      fi
      
      # Test database connection if deployment exists
      if oc get deployment ${RELEASE_NAME}-postgres &>/dev/null; then
        echo "Testing database connection..."
        POD_NAME=$(oc get pods -l app=postgres,instance=$RELEASE_NAME -o jsonpath='{.items[0].metadata.name}')
        if [ -n "$POD_NAME" ]; then
          echo "Testing connection on pod: $POD_NAME"
          # Wait a bit for the pod to be fully ready
          sleep 10
          # Simple connection test
          if oc exec $POD_NAME -- psql -U $DB_USER -d app -c "SELECT 1;" &>/dev/null; then
            echo "✅ Database connection test successful"
          else
            echo "⚠️ Database connection test failed, but continuing (pod may still be starting)"
            oc logs $POD_NAME || echo "Could not get pod logs"
          fi
        else
          echo "❌ No database pod found"
          exit 1
        fi
      else
        echo "ℹ️ No simple PostgreSQL deployment found (may be using Crunchy operator)"
      fi
      
      echo "✅ Database preparation completed"
      echo "Database details:"
      echo "  Host: ${RELEASE_NAME}-pgbouncer"
      echo "  Port: 5432"
      echo "  Database: app"
      echo "  User: $DB_USER"
      echo "  Secret: ${RELEASE_NAME}-pguser-${DB_USER}"
      
      echo "🎉 DATABASE DEPLOYMENT COMPLETED SUCCESSFULLY!"

      - name: Enhanced cleanup of test environment
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          triggers: ${{ inputs.triggers }}
          commands: |
            RELEASE="${{ steps.vars.outputs.release }}"
            echo "Enhanced cleanup for release: $RELEASE"
            
            # Force cleanup if this is a test environment
            if [[ "$RELEASE" == *"-test" ]]; then
              echo "🧹 Performing enhanced test environment cleanup..."
            
              # Remove any existing helm release
              if helm list -q | grep -q "^$RELEASE$"; then
                echo "Removing existing Helm release..."
                helm uninstall $RELEASE --timeout=300s || true
                sleep 10
              fi
            
              # Clean up all resources associated with this release
              echo "Cleaning up all resources..."
              oc delete all,pvc,secrets,configmaps,ingress,route -l app.kubernetes.io/instance=$RELEASE --ignore-not-found=true --timeout=60s || true
              oc delete all,pvc,secrets,configmaps,ingress,route -l release=$RELEASE --ignore-not-found=true --timeout=60s || true
            
              # Clean up database resources specifically
              echo "Cleaning up database resources..."
              oc delete deployment,service,pvc,secrets -l app=postgres,instance=$RELEASE --ignore-not-found=true --timeout=60s || true
            
              # Clean up any stuck/failed pods
              echo "Cleaning up stuck pods..."
              oc delete pods --field-selector=status.phase=Failed --ignore-not-found=true --timeout=30s || true
              oc delete pods --field-selector=status.phase=Succeeded --ignore-not-found=true --timeout=30s || true
            
              # Wait for cleanup to complete
              echo "Waiting for cleanup to complete..."
              sleep 20
            
              # Verify cleanup
              if helm list -q | grep -q "^$RELEASE$"; then
                echo "❌ Helm release still exists after cleanup"
              else
                echo "✅ Helm release successfully removed"
              fi
            
              echo "✅ Enhanced cleanup completed"
            else
              echo "ℹ️ Skipping enhanced cleanup for non-test environment"
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1.4.0
        id: deployment
        with:
          step: start
          token: ${{ github.token }}
          env: ${{ inputs.environment || 'dev' }}
          desc: "Starting deployment..."

      - name: Verify OpenShift Authentication
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          commands: |
            # Verify authentication
            echo "Testing OpenShift authentication..."
            oc whoami
            oc project

            # Test permissions
            echo "Testing permissions..."
            oc auth can-i create deployments || { echo "Missing deployment permissions"; exit 1; }
            oc auth can-i create secrets || { echo "Missing secret permissions"; exit 1; }
            oc auth can-i create services || { echo "Missing service permissions"; exit 1; }
            oc auth can-i create pvc || { echo "Missing PVC permissions"; exit 1; }

            # Test Helm access
            echo "Testing Helm access..."
            helm version --client
            helm list || echo "No existing releases found"

            echo "✅ Authentication and permissions verified"

      - name: Validate Database Exists
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          commands: |
            RELEASE_NAME="${{ steps.vars.outputs.release }}"
            
            # Check if database deployment exists
            if ! oc get deployment ${RELEASE_NAME}-postgres &>/dev/null; then
              echo "❌ Database deployment missing! This will cause connection failures."
              echo "Database deployment step must have failed."
              exit 1
            fi
            
            # Check if database is ready
            if ! oc rollout status deployment/${RELEASE_NAME}-postgres --timeout=60s; then
              echo "❌ Database deployment not ready!"
              exit 1
            fi
            
            echo "✅ Database validation passed"

      - name: Helm Deploy
        id: deploy
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          triggers: ${{ inputs.triggers }}
          ref: ${{ github.ref }}
          commands: |
            # If directory provided, cd to it
            [ -z "${{ inputs.directory }}" ] || cd ${{ inputs.directory }}

            # Set database alias to match what was created
            DATABASE_ALIAS="${{ steps.vars.outputs.release }}"
            echo "Setting database alias to: $DATABASE_ALIAS"

            # Final check for stuck operations before deployment
            RELEASE="${{ steps.vars.outputs.release }}"
            echo "Performing final check for stuck operations..."

            # More comprehensive stuck operation detection and cleanup
            if helm list -q | grep -q "^$RELEASE$"; then
              STATUS=$(helm status $RELEASE -o json 2>/dev/null | jq -r '.info.status // empty' || echo "")
              echo "Current release status: ${STATUS}"

              if [[ "${STATUS}" == "pending-upgrade" || "${STATUS}" == "pending-install" || "${STATUS}" == "pending-rollback" ]]; then
                echo "🚨 Stuck operation detected (${STATUS}), forcing cleanup..."

                # Try rollback first
                echo "Attempting rollback..."
                helm rollback $RELEASE --timeout=60s || {
                  echo "Rollback failed, attempting uninstall..."
                  helm uninstall $RELEASE --timeout=60s || {
                    echo "Uninstall failed, forcing resource cleanup..."
                    # Force delete all resources associated with this release
                    oc delete deployment,service,ingress,route,configmap,secret,pvc,pv -l app.kubernetes.io/instance=$RELEASE --ignore-not-found=true --timeout=30s || true
                    oc delete deployment,service,ingress,route,configmap,secret,pvc,pv -l release=$RELEASE --ignore-not-found=true --timeout=30s || true
                    # Try uninstall again
                    helm uninstall $RELEASE --timeout=60s || true
                  }
                }

                # Wait longer for cleanup to complete
                echo "Waiting for cleanup to complete..."
                sleep 30

                # Verify cleanup and wait for any remaining operations to finish
                for i in {1..10}; do
                  if ! helm list -q | grep -q "^$RELEASE$"; then
                    echo "✅ Release successfully cleaned up"
                    break
                  fi
                  echo "Attempt $i/10: Release still exists, waiting..."
                  sleep 10
                done

                # Final verification
                if helm list -q | grep -q "^$RELEASE$"; then
                  echo "❌ Release still exists after cleanup attempts, checking for stuck operations..."
                  # Check if there are any stuck operations in the cluster
                  oc get pods -l app.kubernetes.io/instance=$RELEASE --field-selector=status.phase!=Running,status.phase!=Succeeded,status.phase!=Failed -o name | xargs -r oc delete --timeout=30s || true
                  sleep 10
                fi
              else
                echo "✅ No stuck operation detected, status: ${STATUS}"
              fi
            else
              echo "ℹ️ No existing helm release found, proceeding with fresh deployment"
            fi

            # Additional cleanup: remove any orphaned resources and wait for cluster to stabilize
            echo "Cleaning up any orphaned resources..."
            oc delete pods --field-selector=status.phase==Succeeded --ignore-not-found=true --timeout=30s || true
            oc delete pods --field-selector=status.phase==Failed --ignore-not-found=true --timeout=30s || true

            # Wait a moment for cluster to stabilize
            echo "Waiting for cluster to stabilize..."
            sleep 10

            # Helm package
            sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
            helm package -u . --app-version="tag-${{ steps.vars.outputs.tag }}_run-${{ github.run_number }}" --version=${{ steps.pr.outputs.pr || steps.vars.outputs.version }}

            # Helm upgrade/rollout with proper database configuration and retry logic
            for attempt in {1..3}; do
              echo "Helm upgrade attempt $attempt/3..."

              if helm upgrade \
                --history-max 10 \
                --set-string global.repository=${{ github.repository }} \
                --set-string global.tag="${{ steps.vars.outputs.tag }}" \
                --set-string global.config.databaseUser="${{ inputs.db_user }}" \
                --set-string global.config.nodeEnv=${{ (inputs.environment == 'prod' || inputs.environment == 'production') && 'production' || (inputs.environment == 'test' && 'test' || 'development') }} \
                --set-string global.databaseAlias="$DATABASE_ALIAS" \
                --set-string global.secrets.enabled=true \
                --set-string global.preserveDatabase="${{ inputs.preserve_database }}" \
                ${{ inputs.params }} \
                --install --wait ${{ inputs.atomic && '--atomic' || '' }} ${{ steps.vars.outputs.release }} \
                --timeout ${{ inputs.timeout-minutes }}m \
                --values ${{ inputs.values }} \
                ./${{ github.event.repository.name }}-${{ steps.pr.outputs.pr || steps.vars.outputs.version }}.tgz; then
                echo "✅ Helm upgrade successful on attempt $attempt"
                break
              else
                echo "❌ Helm upgrade failed on attempt $attempt"
                if [ $attempt -lt 3 ]; then
                  echo "Waiting before retry..."
                  sleep 30

                  # Check if there's a stuck operation and clean it up
                  if helm list -q | grep -q "^${{ steps.vars.outputs.release }}$"; then
                    STATUS=$(helm status ${{ steps.vars.outputs.release }} -o json 2>/dev/null | jq -r '.info.status // empty' || echo "")
                    if [[ "${STATUS}" == "pending-upgrade" || "${STATUS}" == "pending-install" || "${STATUS}" == "pending-rollback" ]]; then
                      echo "Cleaning up stuck operation before retry..."
                      helm uninstall ${{ steps.vars.outputs.release }} --timeout=60s || true
                      oc delete deployment,service,ingress,route,configmap,secret,pvc,pv -l app.kubernetes.io/instance=${{ steps.vars.outputs.release }} --ignore-not-found=true --timeout=30s || true
                      sleep 20
                    fi
                  fi
                else
                  echo "❌ All Helm upgrade attempts failed"
                  exit 1
                fi
              fi
            done

            # Helm release history
            helm history ${{ steps.vars.outputs.release }}

            # Clean up completed pods
            oc delete po --field-selector=status.phase==Succeeded --ignore-not-found=true || true

      - name: Update secrets
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ inputs.oc_server }}
          commands: |
            # Get release name
            RELEASE="${{ inputs.release_name }}"

            # Wait for backend secret to exist (created by helm)
            echo "Waiting for backend secret to be created by helm..."
            for i in {1..30}; do
              if oc get secret $RELEASE-backend &>/dev/null; then
                echo "✅ Backend secret found"
                break
              fi
              echo "Attempt $i/30: Backend secret not found yet, waiting..."
              sleep 2
            done

            if ! oc get secret $RELEASE-backend &>/dev/null; then
              echo "❌ Backend secret was not created by helm"
              exit 1
            fi

            # Update secrets with real values
            echo "Updating backend secret with real SSO values..."

            # Set appropriate login proxy URL based on environment
            if [[ "${{ inputs.environment }}" == "prod" ]]; then
              LOGIN_PROXY="loginproxy.gov.bc.ca"
              ISSUER="https://loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            elif [[ "${{ inputs.environment }}" == "test" ]]; then
              LOGIN_PROXY="test.loginproxy.gov.bc.ca"  
              ISSUER="https://test.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://test.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            else
              LOGIN_PROXY="dev.loginproxy.gov.bc.ca"
              ISSUER="https://dev.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            fi

            # Update client ID
            CLIENT_ID=$(echo -n "${{ secrets.bcgov_sso_api_client_id }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_ID":"'$CLIENT_ID'"}}'

            # Update client secret 
            CLIENT_SECRET=$(echo -n "${{ secrets.bcgov_sso_api_client_secret }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_SECRET":"'$CLIENT_SECRET'"}}'

            # Update issuer
            ISSUER_B64=$(echo -n "$ISSUER" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"ISSUER":"'$ISSUER_B64'"}}'

            # Update jwks uri
            JWKS_URI_B64=$(echo -n "$JWKS_URI" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"JWKS_URI":"'$JWKS_URI_B64'"}}'

            echo "✅ Backend secret updated with real values"

            # Restart backend deployment to pick up new secrets
            if oc get deployment/$RELEASE-backend &>/dev/null; then
              echo "Restarting backend deployment..."
              oc rollout restart deployment/$RELEASE-backend
              echo "Waiting for backend deployment to complete..."
              oc rollout status deployment/$RELEASE-backend --timeout=300s
            else
              echo "Warning: Backend deployment not found: $RELEASE-backend"
            fi

            # Update frontend ConfigMap
            echo "Updating frontend configuration..."

            # Create frontend config JSON
            CONFIG_JSON=$(cat <<EOF
            {
              "api": {
                "baseUrl": "/api/v1"
              },
              "oidc": {
                "clientId": "${{ secrets.vite_keycloak_client_id }}",
                "realm": "standard",
                "serverUrl": "https://$LOGIN_PROXY/auth",
                "logoutUrl": "https://$LOGIN_PROXY/auth/realms/standard/protocol/openid-connect/logout"
              }
            }
            EOF
            )

            # Update frontend ConfigMap
            if oc get configmap $RELEASE-frontend-config &>/dev/null; then
              echo "Updating existing frontend ConfigMap..."
              oc delete configmap $RELEASE-frontend-config
            fi

            echo "$CONFIG_JSON" | oc create configmap $RELEASE-frontend-config --from-file=default.json=/dev/stdin

            echo "✅ Frontend ConfigMap updated"

            # Restart frontend deployment to pick up new config
            if oc get deployment/$RELEASE-frontend &>/dev/null; then
              echo "Restarting frontend deployment..."
              oc delete pods -l app.kubernetes.io/name=frontend,app.kubernetes.io/instance=$RELEASE
              echo "Waiting for frontend deployment to complete..."
              oc rollout status deployment/$RELEASE-frontend --timeout=300s
            else
              echo "Warning: Frontend deployment not found: $RELEASE-frontend"
            fi

            echo "✅ All secrets and configurations updated successfully"

      - name: Update deployment status
        uses: bobheadxi/deployments@v1.4.0
        if: always() && steps.deployment.outputs.deployment_id
        with:
          step: finish
          token: ${{ github.token }}
          status: ${{ job.status }}
          env: ${{ inputs.environment || 'dev' }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ inputs.deployment_url }}

      - name: Log deployment status (fallback)
        if: always() && !steps.deployment.outputs.deployment_id
        run: |
          echo "⚠️ Deployment tracking was not initialized properly"
          echo "Job status: ${{ job.status }}"
          echo "Environment: ${{ inputs.environment || 'dev' }}"
          echo "URL: ${{ inputs.deployment_url }}"