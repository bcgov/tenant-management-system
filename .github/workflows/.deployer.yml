name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      atomic:
        description: Atomic deployment?  That means fail all or nothing
        default: false
        required: false
        type: boolean
      directory:
        description: Chart directory
        default:  'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: OpenShift server
        required: false
        type: string
      params:
        description: Extra parameters to pass to helm upgrade
        required: false
        type: string
      tags:
        description: Specify a tag to deploy; defaults to PR number
        required: false
        type: string
      triggers:
        description: Paths used to trigger a deployment; e.g. ('./backend/' './frontend/)
        required: false
        type: string
      db_user:
        description: The database user
        required: false
        default: 'app'
        type: string
      debug:
        description: Debug mode
        default: false
        required: false
        type: boolean
      release_name:
        required: true
        type: string
        description: "Release name (e.g., tenant-management-system-dev)"

      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string
      deployment_url:
        description: 'Deployment URL; used for environments'
        required: true
        type: string
      db_triggers:
        description: Paths used to trigger a database deployment; e.g. ('charts/crunchy/')
        required: false
        type: string

    outputs:
      tag:
        description: 'Which tag was used for deployment?'
        value: ${{ jobs.deploy.outputs.tag }}
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploy.outputs.triggered }}

    secrets:
      oc_namespace:
        description: OpenShift namespace
        required: true
      oc_token:
        description: OpenShift token
        required: true
      bcgov_sso_api_client_id:
        required: true
      bcgov_sso_api_client_secret:
        required: true
      vite_keycloak_client_id:
        required: true

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Stack
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.deployment_url }}
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ inputs.tag || steps.pr.outputs.pr }}
      triggered: ${{ steps.deploy.outputs.triggered }}
    steps:
      - name: Deploy Crunchy Database
        id: deploy_crunchy
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          triggers: ${{ inputs.db_triggers }}
          commands: |
            # Set database cluster name with proper fallback
            RELEASE_NAME="${{ steps.vars.outputs.release }}"
            if [[ -z "$RELEASE_NAME" ]]; then
              RELEASE_NAME="${{ github.event.repository.name }}-${{ inputs.environment || 'dev' }}"
            fi
            DB_CLUSTER_NAME="${RELEASE_NAME}-postgres"
            echo "Release name: $RELEASE_NAME"
            echo "Database cluster name: $DB_CLUSTER_NAME"
            
            # Clean up any existing Crunchy clusters that are failing
            oc delete postgrescluster --all --ignore-not-found=true
            echo "Cleaned up any existing failed PostgreSQL clusters"
            
            # Set storage size based on environment
            if [[ "${{ inputs.environment }}" == "" ]]; then
              STORAGE_SIZE="1Gi"
            else
              STORAGE_SIZE="3Gi"  # Use 3Gi out of 5Gi quota
            fi
            
            echo "Using simple PostgreSQL deployment with storage size: $STORAGE_SIZE"
            
            # Generate a random password for PostgreSQL
            DB_PASSWORD=$(openssl rand -base64 32)
            
            # Create simple PostgreSQL deployment that actually works
            cat <<EOF | oc apply -f -
            # PostgreSQL Secret
            apiVersion: v1
            kind: Secret
            metadata:
              name: ${DB_CLUSTER_NAME}-pguser-${{ inputs.db_user }}
              labels:
                app.kubernetes.io/name: postgres
                app.kubernetes.io/instance: $RELEASE_NAME
            type: Opaque
            data:
              password: $(echo -n "$DB_PASSWORD" | base64 -w0)
              username: $(echo -n "${{ inputs.db_user }}" | base64 -w0)
              dbname: $(echo -n "app" | base64 -w0)
              host: $(echo -n "${DB_CLUSTER_NAME}-pgbouncer" | base64 -w0)
              port: $(echo -n "5432" | base64 -w0)
            ---
            # PostgreSQL PVC
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: ${DB_CLUSTER_NAME}-data
              labels:
                app.kubernetes.io/name: postgres
                app.kubernetes.io/instance: $RELEASE_NAME
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: $STORAGE_SIZE
              storageClassName: netapp-file-standard
            ---
            # PostgreSQL Deployment
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: ${DB_CLUSTER_NAME}
              labels:
                app.kubernetes.io/name: postgres
                app.kubernetes.io/instance: $RELEASE_NAME
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: ${DB_CLUSTER_NAME}
              template:
                metadata:
                  labels:
                    app: ${DB_CLUSTER_NAME}
                    app.kubernetes.io/name: postgres
                    app.kubernetes.io/instance: $RELEASE_NAME
                spec:
                  containers:
                  - name: postgres
                    image: postgres:15
                    env:
                    - name: POSTGRES_DB
                      value: "app"
                    - name: POSTGRES_USER
                      value: "${{ inputs.db_user }}"
                    - name: POSTGRES_PASSWORD
                      value: "$DB_PASSWORD"
                    - name: PGDATA
                      value: /var/lib/postgresql/data/pgdata
                    ports:
                    - containerPort: 5432
                      name: postgres
                    volumeMounts:
                    - name: postgres-data
                      mountPath: /var/lib/postgresql/data
                    resources:
                      requests:
                        cpu: "100m"
                        memory: "256Mi"
                      limits:
                        cpu: "300m"
                        memory: "512Mi"
                    readinessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - pg_isready -U ${{ inputs.db_user }} -d app
                      initialDelaySeconds: 15
                      periodSeconds: 5
                    livenessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - pg_isready -U ${{ inputs.db_user }} -d app
                      initialDelaySeconds: 45
                      periodSeconds: 10
                  volumes:
                  - name: postgres-data
                    persistentVolumeClaim:
                      claimName: ${DB_CLUSTER_NAME}-data
            ---
            # PostgreSQL Service (with pgbouncer name for compatibility)
            apiVersion: v1
            kind: Service
            metadata:
              name: ${DB_CLUSTER_NAME}-pgbouncer
              labels:
                app.kubernetes.io/name: postgres
                app.kubernetes.io/instance: $RELEASE_NAME
            spec:
              selector:
                app: ${DB_CLUSTER_NAME}
              ports:
              - port: 5432
                targetPort: 5432
                name: postgres
              type: ClusterIP
            EOF
            
            echo "Simple PostgreSQL deployment created, waiting for initialization..."
            
            # Wait for PostgreSQL to be ready
            echo "Waiting for PostgreSQL to be ready..."
            for i in {1..30}; do
              if oc get deployment ${DB_CLUSTER_NAME} &>/dev/null; then
                READY=$(oc get deployment ${DB_CLUSTER_NAME} -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
            
                if [[ "$READY" == "1" ]]; then
                  echo "✅ PostgreSQL is ready!"
            
                  # Verify database connection
                  POD_NAME=$(oc get pods -l app=${DB_CLUSTER_NAME} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
                  if [[ -n "$POD_NAME" ]]; then
                    echo "✅ Database pod is running: $POD_NAME"
                    echo "Database connection details:"
                    echo "Host: ${DB_CLUSTER_NAME}-pgbouncer"
                    echo "Port: 5432"
                    echo "Database: app"
                    echo "User: ${{ inputs.db_user }}"
                    echo "Secret: ${DB_CLUSTER_NAME}-pguser-${{ inputs.db_user }}"
                  fi
            
                  # Set output for the main deployment - use the simple cluster name
                  echo "release=${RELEASE_NAME}-postgres" >> $GITHUB_OUTPUT
                  exit 0
            
                else
                  echo "Attempt $i/30: PostgreSQL not ready yet (ready replicas: $READY)"
                fi
              else
                echo "Attempt $i/30: Deployment not found yet"
              fi
            
              # Show pod status for debugging
              if [[ $((i % 5)) -eq 0 ]]; then
                echo "Pod status:"
                oc get pods -l app=${DB_CLUSTER_NAME} 2>/dev/null || echo "No pods found"
                echo "PVC status:"
                oc get pvc ${DB_CLUSTER_NAME}-data 2>/dev/null || echo "PVC not found"
              fi
            
              sleep 10
            done
            
            # If we get here, timeout occurred
            echo "❌ Timeout waiting for PostgreSQL to be ready"
            echo "Final deployment status:"
            oc get deployment ${DB_CLUSTER_NAME} || echo "Deployment not found"
            echo "Pod status:"
            oc get pods -l app=${DB_CLUSTER_NAME} || echo "No pods found"
            echo "PVC status:"
            oc get pvc ${DB_CLUSTER_NAME}-data || echo "PVC not found"
            exit 1

      # Variables
      - if: inputs.tag  == ''
        id: pr
        uses: bcgov/action-get-pr@21f9351425cd55a98e869ee28919a512aa30647d # v0.0.1

      - id: vars
        run: |
          # Vars: tag and release

          # Tag defaults to PR number, but can be overridden by inputs.tag
          tag=${{ inputs.tag || steps.pr.outputs.pr }}

          # Release name includes run numbers to ensure uniqueness
          release=${{ github.event.repository.name }}-${{ inputs.environment || steps.pr.outputs.pr || inputs.tag }}
          
          # version, to support helm packaging for non-pr based releases (workflow_dispatch). default to 1.0.0+github run number
          version=1.0.0+${{ github.run_number }}
          
            # Summary
          echo "tag=${tag}"
          echo "release=${release}"
          echo "version=${version}"

          # Output
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "release=${release}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Stop pre-existing deployments on PRs (status = pending-upgrade)
        if: github.event_name == 'pull_request'
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          triggers: ${{ inputs.triggers }}
          commands: |
            # Interrupt any previous deployments (PR only)
            PREVIOUS=$(helm status ${{ steps.vars.outputs.release }} -o json | jq .info.status || true)
            if [[ ${PREVIOUS} =~ pending ]]; then
              echo "Rollback triggered"
              helm rollback ${{ steps.vars.outputs.release }} || \
                helm uninstall ${{ steps.vars.outputs.release }}
            fi

      - uses: actions/checkout@v4
      - name: Debug Values File
        if: inputs.debug == 'true'
        run: ls -l charts/crunchy/values.yml

      - name: Start deployment
        uses: bobheadxi/deployments@v1.4.0
        id: deployment
        with:
          step: start
          token: ${{ github.token }}
          env: ${{ inputs.environment || 'dev' }}
          desc: "Starting deployment..."

      - name: Helm Deploy
        id: deploy
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          triggers: ${{ inputs.triggers }}
          ref: ${{ github.ref }}
          commands: |
            # Deploy

            # If directory provided, cd to it
            [ -z "${{ inputs.directory }}" ]|| cd ${{ inputs.directory }}

            # Helm package
            sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
            helm package -u . --app-version="tag-${{ steps.vars.outputs.tag }}_run-${{ github.run_number }}" --version=${{ steps.pr.outputs.pr || steps.vars.outputs.version }}
            # print the values.yaml file to see the values being used
            # Helm upgrade/rollout
            helm upgrade \
              --set-string global.repository=${{ github.repository }} \
              --set-string global.tag="${{ steps.vars.outputs.tag }}" \
              --set-string global.config.databaseUser="${{ inputs.db_user }}" \
              --set-string global.config.nodeEnv=${{ (inputs.environment == 'prod' || inputs.environment == 'production') && 'production' || (inputs.environment == 'test' && 'test' || 'development') }} \
              --set-string global.databaseAlias="${{ steps.deploy_crunchy.outputs.release }}" \
              ${{ inputs.params }} \
              --install --wait ${{ inputs.atomic && '--atomic' || '' }} ${{ steps.vars.outputs.release }} \
              --timeout ${{ inputs.timeout-minutes }}m \
              --values ${{ inputs.values }} \
              ./${{ github.event.repository.name }}-${{ steps.pr.outputs.pr || steps.vars.outputs.version }}.tgz

            # Helm release history
            helm history ${{ steps.vars.outputs.release }}

            # Completed pod cleanup
            oc delete po --field-selector=status.phase==Succeeded || true

      - name: Update secrets
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
        with:
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_token: ${{ secrets.oc_token }}
          oc_server: ${{ vars.oc_server }}
          commands: |
            # Get release name
            RELEASE="${{ inputs.release_name }}"
            
            # Check if backend secret exists, create if it doesn't
            if ! oc get secret $RELEASE-backend &> /dev/null; then
              echo "Creating missing backend secret $RELEASE-backend"
              oc create secret generic $RELEASE-backend \
                --from-literal=BCGOV_SSO_API_CLIENT_ID="placeholder" \
                --from-literal=BCGOV_SSO_API_CLIENT_SECRET="placeholder" \
                --from-literal=ISSUER="placeholder" \
                --from-literal=JWKS_URI="placeholder"
            fi
            
            # Update secrets with real values
            echo "Patching secret $RELEASE-backend"
            
            # Update client ID
            CLIENT_ID=$(echo -n "${{ secrets.bcgov_sso_api_client_id }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_ID":"'$CLIENT_ID'"}}'
            
            # Update client secret 
            CLIENT_SECRET=$(echo -n "${{ secrets.bcgov_sso_api_client_secret }}" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"BCGOV_SSO_API_CLIENT_SECRET":"'$CLIENT_SECRET'"}}'
            
            # Set appropriate login proxy URL based on environment
            if [[ "${{ inputs.environment }}" == "prod" ]]; then
              LOGIN_PROXY="loginproxy.gov.bc.ca"
              ISSUER="https://loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            elif [[ "${{ inputs.environment }}" == "test" ]]; then
              LOGIN_PROXY="test.loginproxy.gov.bc.ca"  
              ISSUER="https://test.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://test.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            else
              LOGIN_PROXY="dev.loginproxy.gov.bc.ca"
              ISSUER="https://dev.loginproxy.gov.bc.ca/auth/realms/standard"
              JWKS_URI="https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
            fi

            # Update issuer
            ISSUER_B64=$(echo -n "$ISSUER" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"ISSUER":"'$ISSUER_B64'"}}'
            
            # Update jwks uri
            JWKS_URI_B64=$(echo -n "$JWKS_URI" | base64 -w0)
            oc patch secret $RELEASE-backend \
              -p '{"data":{"JWKS_URI":"'$JWKS_URI_B64'"}}'
            
            # Check if deployment exists first
            if oc get deployment/$RELEASE-backend &>/dev/null; then
              echo "Restarting deployment $RELEASE-backend"
              oc rollout restart deployment/$RELEASE-backend
              echo "Waiting for backend deployment to complete..."
              oc rollout status deployment/$RELEASE-backend --timeout=300s
            else
              echo "Warning: Deployment $RELEASE-backend not found"
            fi

            # Check if frontend ConfigMap exists, create if it doesn't
            if ! oc get configmap $RELEASE-frontend-config &> /dev/null; then
              echo "Creating missing frontend ConfigMap $RELEASE-frontend-config"
              oc create configmap $RELEASE-frontend-config --from-literal=placeholder=placeholder
            fi

            # Update frontend ConfigMap
            echo "Patching ConfigMap $RELEASE-frontend-config"

            # Create a new default.json content with real values
            CONFIG_JSON=$(cat <<EOF
            {
              "api": {
                "baseUrl": "/api/v1"
              },
              "oidc": {
                "clientId": "${{ secrets.vite_keycloak_client_id }}",
                "realm": "standard",
                "serverUrl": "https://$LOGIN_PROXY/auth",
                "logoutUrl": "https://$LOGIN_PROXY/auth/realms/standard/protocol/openid-connect/logout"
              }
            }
            EOF
            )

            # Create a temporary file with the JSON content
            echo "$CONFIG_JSON" > default.json

            # Force delete and recreate the ConfigMap
            oc delete configmap $RELEASE-frontend-config --ignore-not-found
            oc create configmap $RELEASE-frontend-config --from-file=default.json
            
            # Clean up the temporary file
            rm default.json

            # Replace the pod instead of restarting to ensure ConfigMap is refreshed
            if oc get deployment/$RELEASE-frontend &>/dev/null; then
              oc delete pods -l app.kubernetes.io/instance=$RELEASE-frontend
              echo "Waiting for frontend deployment to complete..."
              oc rollout status deployment/$RELEASE-frontend --timeout=300s
            else
              echo "Warning: Deployment $RELEASE-frontend not found"
            fi

      - name: Update deployment status
        uses: bobheadxi/deployments@v1.4.0
        if: always() && steps.deployment.outputs.deployment_id
        with:
          step: finish
          token: ${{ github.token }}
          status: ${{ job.status }}
          env: ${{ inputs.environment || 'dev' }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ inputs.deployment_url }}

      - name: Log deployment status (fallback)
        if: always() && !steps.deployment.outputs.deployment_id
        run: |
          echo "⚠️ Deployment tracking was not initialized properly"
          echo "Job status: ${{ job.status }}"
          echo "Environment: ${{ inputs.environment || 'dev' }}"
          echo "URL: ${{ inputs.deployment_url }}"